{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg_for_OsmosisRoute_and_OsmosisMsg",
  "oneOf": [
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_cfg"
          ],
          "properties": {
            "new_cfg": {
              "$ref": "#/definitions/CreateOrUpdateConfig"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Configure the route for swapping an asset\n\nThis is chain-specific, and can include parameters such as slippage tolerance and the routes for multi-step swaps",
      "type": "object",
      "required": [
        "set_route"
      ],
      "properties": {
        "set_route": {
          "type": "object",
          "required": [
            "denom_in",
            "denom_out",
            "route"
          ],
          "properties": {
            "denom_in": {
              "type": "string"
            },
            "denom_out": {
              "type": "string"
            },
            "route": {
              "$ref": "#/definitions/OsmosisRoute"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw maTokens from the red bank",
      "type": "object",
      "required": [
        "withdraw_from_red_bank"
      ],
      "properties": {
        "withdraw_from_red_bank": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Distribute the accrued protocol income between the safety fund and the fee modules on mars hub, according to the split set in config. Callable by any address.",
      "type": "object",
      "required": [
        "distribute_rewards"
      ],
      "properties": {
        "distribute_rewards": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap any asset on the contract",
      "type": "object",
      "required": [
        "swap_asset"
      ],
      "properties": {
        "swap_asset": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute Cosmos msg (only callable by owner)",
      "type": "object",
      "required": [
        "execute_cosmos_msg"
      ],
      "properties": {
        "execute_cosmos_msg": {
          "type": "object",
          "required": [
            "cosmos_msg"
          ],
          "properties": {
            "cosmos_msg": {
              "$ref": "#/definitions/CosmosMsg_for_OsmosisMsg"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BankMsg": {
      "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "to_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg_for_OsmosisMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/OsmosisMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "type_url",
                "value"
              ],
              "properties": {
                "type_url": {
                  "type": "string"
                },
                "value": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "gov"
          ],
          "properties": {
            "gov": {
              "$ref": "#/definitions/GovMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CreateOrUpdateConfig": {
      "type": "object",
      "properties": {
        "address_provider": {
          "description": "Address provider returns addresses for all protocol contracts",
          "type": [
            "string",
            "null"
          ]
        },
        "channel_id": {
          "description": "The channel id of the mars hub",
          "type": [
            "string",
            "null"
          ]
        },
        "fee_collector_denom": {
          "description": "The asset to which the fee collector share is converted",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Contract owner",
          "type": [
            "string",
            "null"
          ]
        },
        "safety_fund_denom": {
          "description": "The asset to which the safety fund share is converted",
          "type": [
            "string",
            "null"
          ]
        },
        "safety_tax_rate": {
          "description": "Percentage of fees that are sent to the safety fund",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "timeout_blocks": {
          "description": "Number of blocks after which an IBC transfer is to be considered failed, if no acknowledgement is received",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "timeout_revision": {
          "description": "Revision number of Mars Hub's IBC light client",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "timeout_seconds": {
          "description": "Number of seconds after which an IBC transfer is to be considered failed, if no acknowledgement is received",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "GovMsg": {
      "oneOf": [
        {
          "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
          "type": "object",
          "required": [
            "vote"
          ],
          "properties": {
            "vote": {
              "type": "object",
              "required": [
                "proposal_id",
                "vote"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "$ref": "#/definitions/VoteOption"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcMsg": {
      "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
      "oneOf": [
        {
          "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "channel_id",
                "timeout",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    }
                  ]
                },
                "channel_id": {
                  "description": "exisiting channel to send the tokens over",
                  "type": "string"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                },
                "to_address": {
                  "description": "address on the remote chain to receive these tokens",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
          "type": "object",
          "required": [
            "send_packet"
          ],
          "properties": {
            "send_packet": {
              "type": "object",
              "required": [
                "channel_id",
                "data",
                "timeout"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "data": {
                  "$ref": "#/definitions/Binary"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
          "type": "object",
          "required": [
            "close_channel"
          ],
          "properties": {
            "close_channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcTimeout": {
      "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/IbcTimeoutBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "IbcTimeoutBlock": {
      "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
      "type": "object",
      "required": [
        "height",
        "revision"
      ],
      "properties": {
        "height": {
          "description": "block height after which the packet times out. the height within the given revision",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision": {
          "description": "the version that the client is currently on (eg. after reseting the chain this could increment 1 as height drops to 0)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "OsmosisMsg": {
      "description": "A number of Custom messages that can call into the Osmosis bindings",
      "oneOf": [
        {
          "description": "Contracts can mint native tokens that have an auto-generated denom namespaced under the contract's address. A contract may create any number of independent sub-denoms. Returns FullDenomResponse in the data field of the Response",
          "type": "object",
          "required": [
            "mint_tokens"
          ],
          "properties": {
            "mint_tokens": {
              "type": "object",
              "required": [
                "amount",
                "recipient",
                "sub_denom"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "recipient": {
                  "type": "string"
                },
                "sub_denom": {
                  "description": "sub_denoms (nonces in Osmosis) are validated as part of the full denomination. Can be up to 128 - prefix length (currently 7) - bech32 address length (4 (osmo) + 39) - number of separators (2) = 76 \"alphanumeric\" (https://github.com/cosmos/cosmos-sdk/blob/2646b474c7beb0c93d4fafd395ef345f41afc251/types/coin.go#L677) characters long. Empty sub-denoms are valid. The token will then be prefix + contract address, i.e. \"factory/<bech32 address>/\"",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Swap over one or more pools Returns SwapResponse in the data field of the Response",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "amount",
                "first",
                "route"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/SwapAmountWithLimit"
                },
                "first": {
                  "$ref": "#/definitions/Swap"
                },
                "route": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Step"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OsmosisRoute": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Step"
      }
    },
    "Step": {
      "type": "object",
      "required": [
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Swap": {
      "type": "object",
      "required": [
        "denom_in",
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_in": {
          "type": "string"
        },
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "SwapAmountWithLimit": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "exact_in"
          ],
          "properties": {
            "exact_in": {
              "type": "object",
              "required": [
                "input",
                "min_output"
              ],
              "properties": {
                "input": {
                  "$ref": "#/definitions/Uint128"
                },
                "min_output": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "exact_out"
          ],
          "properties": {
            "exact_out": {
              "type": "object",
              "required": [
                "max_input",
                "output"
              ],
              "properties": {
                "max_input": {
                  "$ref": "#/definitions/Uint128"
                },
                "output": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "VoteOption": {
      "type": "string",
      "enum": [
        "yes",
        "no",
        "abstain",
        "no_with_veto"
      ]
    },
    "WasmMsg": {
      "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
      "oneOf": [
        {
          "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "funds",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "msg": {
                  "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.16.0-alpha1/x/wasm/internal/types/tx.proto#L47-L61). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "funds",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "label": {
                  "description": "A human-readbale label for the contract",
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg",
                "new_code_id"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "new_code_id": {
                  "description": "the code_id of the new logic to place in the given contract",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "admin",
                "contract_addr"
              ],
              "properties": {
                "admin": {
                  "type": "string"
                },
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "clear_admin"
          ],
          "properties": {
            "clear_admin": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
