{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Market",
  "description": "Asset markets",
  "type": "object",
  "required": [
    "active",
    "asset_type",
    "borrow_enabled",
    "borrow_index",
    "borrow_rate",
    "debt_total_scaled",
    "deposit_enabled",
    "index",
    "indexes_last_updated",
    "interest_rate_model",
    "liquidation_bonus",
    "liquidation_threshold",
    "liquidity_index",
    "liquidity_rate",
    "ma_token_address",
    "max_loan_to_value",
    "reserve_factor"
  ],
  "properties": {
    "active": {
      "description": "If false cannot do any action (deposit/withdraw/borrow/repay/liquidate)",
      "type": "boolean"
    },
    "asset_type": {
      "description": "Indicated whether the asset is native or a cw20 token",
      "allOf": [
        {
          "$ref": "#/definitions/AssetType"
        }
      ]
    },
    "borrow_enabled": {
      "description": "If false cannot borrow",
      "type": "boolean"
    },
    "borrow_index": {
      "description": "Borrow index (Used to compute borrow interest)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "borrow_rate": {
      "description": "Rate charged to borrowers",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "debt_total_scaled": {
      "description": "Total debt scaled for the market's currency",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "deposit_enabled": {
      "description": "If false cannot deposit",
      "type": "boolean"
    },
    "index": {
      "description": "Market index (Bit position on data)",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "indexes_last_updated": {
      "description": "Timestamp (seconds) where indexes and where last updated",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "interest_rate_model": {
      "description": "model (params + internal state) that defines how interest rate behaves",
      "allOf": [
        {
          "$ref": "#/definitions/InterestRateModel"
        }
      ]
    },
    "liquidation_bonus": {
      "description": "Bonus amount of collateral liquidator get when repaying user's debt (Will get collateral from user in an amount equal to debt repayed + bonus)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidation_threshold": {
      "description": "Base asset amount in debt position per \"base asset\" of asset collateral that if surpassed makes the user's position liquidatable.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidity_index": {
      "description": "Liquidity index (Used to compute deposit interest)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidity_rate": {
      "description": "Rate paid to depositors",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "ma_token_address": {
      "description": "maToken contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "max_loan_to_value": {
      "description": "Max base asset that can be borrowed per \"base asset\" collateral when using the asset as collateral",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "reserve_factor": {
      "description": "Portion of the borrow rate that is kept as protocol rewards",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetType": {
      "type": "string",
      "enum": [
        "cw20",
        "native"
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DynamicInterestRateModelParams": {
      "type": "object",
      "required": [
        "kp_1",
        "kp_2",
        "kp_augmentation_threshold",
        "max_borrow_rate",
        "min_borrow_rate",
        "optimal_utilization_rate",
        "update_threshold_seconds",
        "update_threshold_txs"
      ],
      "properties": {
        "kp_1": {
          "description": "Proportional parameter for the PID controller",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "kp_2": {
          "description": "Kp value when error threshold is exceeded",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "kp_augmentation_threshold": {
          "description": "Min error that triggers Kp augmentation",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_borrow_rate": {
          "description": "Maximum borrow rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "min_borrow_rate": {
          "description": "Minimum borrow rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "optimal_utilization_rate": {
          "description": "Optimal utilization rate targeted by the PID controller. Interest rate will decrease when lower and increase when higher",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "update_threshold_seconds": {
          "description": "Amount of seconds since last borrow rate update that will trigger the next borrow rate update when the next transaction involving the market's interest update happens",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "update_threshold_txs": {
          "description": "Amount of transactions involving the market's interest update since last borrow rate update that will trigger the next borrow rate update",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "DynamicInterestRateModelState": {
      "type": "object",
      "required": [
        "borrow_rate_last_updated",
        "txs_since_last_borrow_rate_update"
      ],
      "properties": {
        "borrow_rate_last_updated": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "txs_since_last_borrow_rate_update": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "InterestRateModel": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "dynamic"
          ],
          "properties": {
            "dynamic": {
              "type": "object",
              "required": [
                "params",
                "state"
              ],
              "properties": {
                "params": {
                  "$ref": "#/definitions/DynamicInterestRateModelParams"
                },
                "state": {
                  "$ref": "#/definitions/DynamicInterestRateModelState"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "type": "object",
              "required": [
                "params"
              ],
              "properties": {
                "params": {
                  "$ref": "#/definitions/LinearInterestRateModelParams"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LinearInterestRateModelParams": {
      "description": "Linear interest rate model",
      "type": "object",
      "required": [
        "base",
        "optimal_utilization_rate",
        "slope_1",
        "slope_2"
      ],
      "properties": {
        "base": {
          "description": "Base rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "optimal_utilization_rate": {
          "description": "Optimal utilization rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_1": {
          "description": "Slope parameter for interest rate model function when utilization_rate < optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_2": {
          "description": "Slope parameter for interest rate model function when utilization_rate >= optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
