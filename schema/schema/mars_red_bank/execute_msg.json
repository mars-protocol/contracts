{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Implementation of cw20 receive msg",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract config (only owner can call)",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/CreateOrUpdateConfig"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Initialize an asset on the money market (only owner can call)",
      "type": "object",
      "required": [
        "init_asset"
      ],
      "properties": {
        "init_asset": {
          "type": "object",
          "required": [
            "asset",
            "asset_params"
          ],
          "properties": {
            "asset": {
              "description": "Asset related info",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "asset_params": {
              "description": "Asset parameters",
              "allOf": [
                {
                  "$ref": "#/definitions/InitOrUpdateAssetParams"
                }
              ]
            },
            "asset_symbol": {
              "description": "Asset symbol to be used in maToken name and description. If non is provided, denom will be used for native and token symbol will be used for cw20. Mostly useful for native assets since it's denom (e.g.: uluna, uusd) does not match it's user facing symbol (LUNA, UST) which should be used in maToken's attributes for the sake of consistency",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callback sent from maToken contract after instantiated",
      "type": "object",
      "required": [
        "init_asset_token_callback"
      ],
      "properties": {
        "init_asset_token_callback": {
          "type": "object",
          "required": [
            "reference"
          ],
          "properties": {
            "reference": {
              "description": "Either the denom for a native asset or address for a cw20 token in bytes",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update an asset on the money market (only owner can call)",
      "type": "object",
      "required": [
        "update_asset"
      ],
      "properties": {
        "update_asset": {
          "type": "object",
          "required": [
            "asset",
            "asset_params"
          ],
          "properties": {
            "asset": {
              "description": "Asset related info",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "asset_params": {
              "description": "Asset parameters",
              "allOf": [
                {
                  "$ref": "#/definitions/InitOrUpdateAssetParams"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update uncollateralized loan limit for a given user and asset. Overrides previous value if any. A limit of zero means no uncollateralized limit and the debt in that asset needs to be collateralized (only owner can call)",
      "type": "object",
      "required": [
        "update_uncollateralized_loan_limit"
      ],
      "properties": {
        "update_uncollateralized_loan_limit": {
          "type": "object",
          "required": [
            "asset",
            "new_limit",
            "user_address"
          ],
          "properties": {
            "asset": {
              "description": "Asset the user receives the credit in",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "new_limit": {
              "description": "Limit for the uncolateralize loan.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "user_address": {
              "description": "Address that receives the credit",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit native coins. Deposited coins must be sent in the transaction this call is made",
      "type": "object",
      "required": [
        "deposit_native"
      ],
      "properties": {
        "deposit_native": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "description": "Denom used (e.g: uluna, uusd)",
              "type": "string"
            },
            "on_behalf_of": {
              "description": "Address that will receive the maTokens",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw an amount of the asset burning an equivalent amount of maTokens.",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "amount": {
              "description": "Amount to be withdrawn. If None is specified, the full maToken balance will be burned in exchange for the equivalent asset amount.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "asset": {
              "description": "Asset to withdraw",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "recipient": {
              "description": "The address where the withdrawn amount is sent",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Borrow native coins. If borrow allowed, amount is added to caller's debt and sent to the address.",
      "type": "object",
      "required": [
        "borrow"
      ],
      "properties": {
        "borrow": {
          "type": "object",
          "required": [
            "amount",
            "asset"
          ],
          "properties": {
            "amount": {
              "description": "Amount to borrow",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "asset": {
              "description": "Asset to borrow",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "recipient": {
              "description": "The address where the borrowed amount is sent",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Repay native coins loan. Coins used to repay must be sent in the transaction this call is made.",
      "type": "object",
      "required": [
        "repay_native"
      ],
      "properties": {
        "repay_native": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "description": "Denom used (e.g: uluna, uusd)",
              "type": "string"
            },
            "on_behalf_of": {
              "description": "Repay the funds for the user",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Liquidate under-collateralized native loans. Coins used to repay must be sent in the transaction this call is made.",
      "type": "object",
      "required": [
        "liquidate_native"
      ],
      "properties": {
        "liquidate_native": {
          "type": "object",
          "required": [
            "collateral_asset",
            "debt_asset_denom",
            "receive_ma_token",
            "user_address"
          ],
          "properties": {
            "collateral_asset": {
              "description": "Collateral asset liquidator gets from the borrower",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "debt_asset_denom": {
              "description": "Denom (e.g: uluna, uusd) of the debt asset",
              "type": "string"
            },
            "receive_ma_token": {
              "description": "Whether the liquidator gets liquidated collateral in maToken (true) or the underlying collateral asset (false)",
              "type": "boolean"
            },
            "user_address": {
              "description": "The address of the borrower getting liquidated",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update (enable / disable) asset as collateral for the caller",
      "type": "object",
      "required": [
        "update_asset_collateral_status"
      ],
      "properties": {
        "update_asset_collateral_status": {
          "type": "object",
          "required": [
            "asset",
            "enable"
          ],
          "properties": {
            "asset": {
              "description": "Asset to update status for",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "enable": {
              "description": "Option to enable (true) / disable (false) asset as collateral",
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called by liquidity token (maToken). Validate liquidity token transfer is valid and update collateral status",
      "type": "object",
      "required": [
        "finalize_liquidity_token_transfer"
      ],
      "properties": {
        "finalize_liquidity_token_transfer": {
          "type": "object",
          "required": [
            "amount",
            "recipient_address",
            "recipient_previous_balance",
            "sender_address",
            "sender_previous_balance"
          ],
          "properties": {
            "amount": {
              "description": "Transfer amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "recipient_address": {
              "description": "Token recipient. Address is trusted because it should have been verified in the token contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "recipient_previous_balance": {
              "description": "Recipient's balance before the token transfer",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "sender_address": {
              "description": "Token sender. Address is trusted because it should have been verified in the token contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "sender_previous_balance": {
              "description": "Sender's balance before the token transfer",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "Represents either a native asset or a cw20. Meant to be used as part of a msg in a contract call and not to be used internally",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CreateOrUpdateConfig": {
      "type": "object",
      "properties": {
        "address_provider_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "base_asset": {
          "anyOf": [
            {
              "$ref": "#/definitions/Asset"
            },
            {
              "type": "null"
            }
          ]
        },
        "close_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "ma_token_code_id": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DynamicInterestRateModelParams": {
      "type": "object",
      "required": [
        "kp_1",
        "kp_2",
        "kp_augmentation_threshold",
        "max_borrow_rate",
        "min_borrow_rate",
        "optimal_utilization_rate",
        "update_threshold_seconds",
        "update_threshold_txs"
      ],
      "properties": {
        "kp_1": {
          "description": "Proportional parameter for the PID controller",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "kp_2": {
          "description": "Kp value when error threshold is exceeded",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "kp_augmentation_threshold": {
          "description": "Min error that triggers Kp augmentation",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_borrow_rate": {
          "description": "Maximum borrow rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "min_borrow_rate": {
          "description": "Minimum borrow rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "optimal_utilization_rate": {
          "description": "Optimal utilization rate targeted by the PID controller. Interest rate will decrease when lower and increase when higher",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "update_threshold_seconds": {
          "description": "Amount of seconds since last borrow rate update that will trigger the next borrow rate update when the next transaction involving the market's interest update happens",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "update_threshold_txs": {
          "description": "Amount of transactions involving the market's interest update since last borrow rate update that will trigger the next borrow rate update",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "InitOrUpdateAssetParams": {
      "type": "object",
      "properties": {
        "active": {
          "description": "If false cannot do any action (deposit/withdraw/borrow/repay/liquidate)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "borrow_enabled": {
          "description": "If false cannot borrow",
          "type": [
            "boolean",
            "null"
          ]
        },
        "deposit_enabled": {
          "description": "If false cannot deposit",
          "type": [
            "boolean",
            "null"
          ]
        },
        "initial_borrow_rate": {
          "description": "Initial borrow rate",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "interest_rate_model_params": {
          "description": "Interest rate strategy to calculate borrow_rate and liquidity_rate",
          "anyOf": [
            {
              "$ref": "#/definitions/InterestRateModelParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_bonus": {
          "description": "Bonus amount of collateral liquidator get when repaying user's debt (Will get collateral from user in an amount equal to debt repayed + bonus)",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_threshold": {
          "description": "uusd amount in debt position per uusd of asset collateral that if surpassed makes the user's position liquidatable.",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_loan_to_value": {
          "description": "Max uusd that can be borrowed per uusd of collateral when using the asset as collateral",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "reserve_factor": {
          "description": "Portion of the borrow rate that is kept as protocol rewards",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "InterestRateModelParams": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "dynamic"
          ],
          "properties": {
            "dynamic": {
              "$ref": "#/definitions/DynamicInterestRateModelParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "$ref": "#/definitions/LinearInterestRateModelParams"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LinearInterestRateModelParams": {
      "description": "Linear interest rate model",
      "type": "object",
      "required": [
        "base",
        "optimal_utilization_rate",
        "slope_1",
        "slope_2"
      ],
      "properties": {
        "base": {
          "description": "Base rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "optimal_utilization_rate": {
          "description": "Optimal utilization rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_1": {
          "description": "Slope parameter for interest rate model function when utilization_rate < optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_2": {
          "description": "Slope parameter for interest rate model function when utilization_rate >= optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
