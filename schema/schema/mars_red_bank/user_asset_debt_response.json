{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UserAssetDebtResponse",
  "type": "object",
  "required": [
    "amount",
    "amount_scaled",
    "asset_label",
    "asset_reference",
    "asset_type",
    "denom"
  ],
  "properties": {
    "amount": {
      "description": "Underlying asset amount that is actually owed at the current block",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "amount_scaled": {
      "description": "Scaled debt amount stored in contract state",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "asset_label": {
      "description": "Either denom if native asset or contract address if cw20",
      "type": "string"
    },
    "asset_reference": {
      "description": "Bytes used as key on the kv store for data related to the asset",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "asset_type": {
      "description": "Indicated whether the asset is native or a cw20 token",
      "allOf": [
        {
          "$ref": "#/definitions/AssetType"
        }
      ]
    },
    "denom": {
      "description": "Asset denom",
      "type": "string"
    }
  },
  "definitions": {
    "AssetType": {
      "type": "string",
      "enum": [
        "cw20",
        "native"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
