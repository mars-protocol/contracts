{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MarketsListResponse",
  "type": "object",
  "required": [
    "markets_list"
  ],
  "properties": {
    "markets_list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MarketInfo"
      }
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetType": {
      "type": "string",
      "enum": [
        "cw20",
        "native"
      ]
    },
    "MarketInfo": {
      "type": "object",
      "required": [
        "asset_label",
        "asset_reference",
        "asset_type",
        "denom",
        "ma_token_address"
      ],
      "properties": {
        "asset_label": {
          "description": "Either denom if native asset or contract address if cw20",
          "type": "string"
        },
        "asset_reference": {
          "description": "Bytes used as key on the kv store for data related to the asset",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "asset_type": {
          "description": "Indicated whether the asset is native or a cw20 token",
          "allOf": [
            {
              "$ref": "#/definitions/AssetType"
            }
          ]
        },
        "denom": {
          "description": "Asset denom",
          "type": "string"
        },
        "ma_token_address": {
          "description": "Address for the corresponding maToken",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      }
    }
  }
}
