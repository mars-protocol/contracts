[tasks.generate-all-schemas]
script_runner = "@rust"
script = '''
use std::fs;
use std::process::Command;

fn main() -> std::io::Result<()> {
    let _ = fs::remove_dir_all("schema");
    let _ = fs::remove_dir_all("schemas");
    fs::create_dir("schemas")?;
    println!("Done");

    let contracts = vec![
        "mars-account-nft",
        "mars-address-provider",
        "mars-credit-manager",
        "mars-incentives",
        "mars-mock-vault",
        "mars-red-bank",
        "mars-rewards-collector-base",
        "mars-params",
        "mars-rover-health",
        "mars-rover-health-computer",
        "mars-swapper-base",
        "mars-swapper-osmosis",
        "mars-swapper-astroport",
        "mars-oracle-osmosis",
        "mars-oracle-wasm",
        "mars-zapper-base",
        "mars-vault",
    ];

    for contract in contracts {
        println!("{}", contract);

        let output = Command::new("cargo")
            .arg("run")
            .arg("--package")
            .arg(contract)
            .arg("--example")
            .arg("schema")
            .output()
            .expect("failed to execute process");

        println!("status: {}", output.status);
        println!("stdout: {}", String::from_utf8_lossy(&output.stdout));
        println!("stderr: {}", String::from_utf8_lossy(&output.stderr));

        fs::create_dir(format!("schemas/{}", contract))?;

        fs::rename(
            format!("schema/{}.json", contract),
            format!("schemas/{}/{}.json", contract, contract),
        )?;
    }

    let _ = fs::remove_dir_all("schema");

    Ok(())
}
'''
