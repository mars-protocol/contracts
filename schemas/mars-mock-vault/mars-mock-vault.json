{
  "contract_name": "mars-mock-vault",
  "contract_version": "2.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "base_token_denom",
      "oracle",
      "vault_token_denom"
    ],
    "properties": {
      "base_token_denom": {
        "description": "Denom required for entry. Also denom received on withdraw.",
        "type": "string"
      },
      "is_evil": {
        "description": "Used to simulate a compromised vault that attempts reentrancy",
        "type": [
          "string",
          "null"
        ]
      },
      "lockup": {
        "description": "Duration of unlock period",
        "anyOf": [
          {
            "$ref": "#/definitions/Duration"
          },
          {
            "type": "null"
          }
        ]
      },
      "oracle": {
        "$ref": "#/definitions/OracleBase_for_String"
      },
      "vault_token_denom": {
        "description": "Denom for vault token",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OracleBase_for_String": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "The default ExecuteMsg variants that all vaults must implement. This enum can be extended with additional variants by defining an extension enum and then passing it as the generic argument `T` to this enum.",
    "oneOf": [
      {
        "description": "Called to deposit into the vault. Native assets are passed in the funds parameter.",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of base tokens to deposit.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "recipient": {
                "description": "The optional recipient of the vault token. If not set, the caller address will be used instead.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called to redeem vault tokens and receive assets back from the vault. The native vault token must be passed in the funds parameter, unless the lockup extension is called, in which case the vault token has already been passed to ExecuteMsg::Unlock.",
        "type": "object",
        "required": [
          "redeem"
        ],
        "properties": {
          "redeem": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of vault tokens sent to the contract. In the case that the vault token is a Cosmos native denom, we of course have this information in info.funds, but if the vault implements the Cw4626 API, then we need this argument. We figured it's better to have one API for both types of vaults, so we require this argument.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "recipient": {
                "description": "An optional field containing which address should receive the withdrawn base tokens. If not set, the caller address will be used instead.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called to execute functionality of any enabled extensions.",
        "type": "object",
        "required": [
          "vault_extension"
        ],
        "properties": {
          "vault_extension": {
            "$ref": "#/definitions/ExtensionExecuteMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ExtensionExecuteMsg": {
        "description": "Contains ExecuteMsgs of all enabled extensions. To enable extensions defined outside of this crate, you can define your own `ExtensionExecuteMsg` type in your contract crate and pass it in as the generic parameter to ExecuteMsg",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lockup"
            ],
            "properties": {
              "lockup": {
                "$ref": "#/definitions/LockupExecuteMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "force_unlock"
            ],
            "properties": {
              "force_unlock": {
                "$ref": "#/definitions/ForceUnlockExecuteMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ForceUnlockExecuteMsg": {
        "description": "Additional ExecuteMsg variants for vaults that enable the ForceUnlock extension.",
        "oneOf": [
          {
            "description": "Can be called by whitelisted addresses to bypass the lockup and immediately return the base tokens. Used in the event of liquidation. The caller must pass the native vault tokens in the funds field.",
            "type": "object",
            "required": [
              "force_redeem"
            ],
            "properties": {
              "force_redeem": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of vault tokens to force redeem.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "recipient": {
                    "description": "The address which should receive the withdrawn assets. If not set, the caller address will be used instead.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Force withdraw from a position that is already unlocking (Unlock has already been called).",
            "type": "object",
            "required": [
              "force_withdraw_unlocking"
            ],
            "properties": {
              "force_withdraw_unlocking": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "amount": {
                    "description": "Optional amount of base tokens to be force withdrawn. If None is passed, the entire position will be force withdrawn.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lockup_id": {
                    "description": "The ID of the unlocking position from which to force withdraw",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "recipient": {
                    "description": "The address which should receive the withdrawn assets. If not set, the assets will be sent to the caller.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the whitelist of addresses that can call ForceRedeem and ForceWithdrawUnlocking.",
            "type": "object",
            "required": [
              "update_force_withdraw_whitelist"
            ],
            "properties": {
              "update_force_withdraw_whitelist": {
                "type": "object",
                "required": [
                  "add_addresses",
                  "remove_addresses"
                ],
                "properties": {
                  "add_addresses": {
                    "description": "Addresses to add to the whitelist.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove_addresses": {
                    "description": "Addresses to remove from the whitelist.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LockupExecuteMsg": {
        "description": "Additional ExecuteMsg variants for vaults that enable the Lockup extension.",
        "oneOf": [
          {
            "description": "Unlock is called to initiate unlocking a locked position held by the vault. The caller must pass the native vault tokens in the funds field. Emits an event with type `UNLOCKING_POSITION_CREATED_EVENT_TYPE` with an attribute with key `UNLOCKING_POSITION_ATTR_KEY` containing an u64 lockup_id.\n\nLike Redeem, this takes an amount so that the same API can be used for CW4626 and native tokens.",
            "type": "object",
            "required": [
              "unlock"
            ],
            "properties": {
              "unlock": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of vault tokens to unlock.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "EmergencyUnlock is called to initiate unlocking a locked position held by the vault. This call should simply unlock `amount` of vault tokens, without performing any other side effects that might cause the transaction to fail. Such as for example compoundning rewards for an LP position.",
            "type": "object",
            "required": [
              "emergency_unlock"
            ],
            "properties": {
              "emergency_unlock": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of vault tokens to unlock.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw an unlocking position that has finished unlocking.",
            "type": "object",
            "required": [
              "withdraw_unlocked"
            ],
            "properties": {
              "withdraw_unlocked": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "lockup_id": {
                    "description": "The ID of the expired lockup to withdraw from.",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "recipient": {
                    "description": "An optional field containing which address should receive the withdrawn base tokens. If not set, the caller address will be used instead.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "The default QueryMsg variants that all vaults must implement. This enum can be extended with additional variants by defining an extension enum and then passing it as the generic argument `T` to this enum.",
    "oneOf": [
      {
        "description": "Returns `VaultStandardInfoResponse` with information on the version of the vault standard used as well as any enabled extensions.",
        "type": "object",
        "required": [
          "vault_standard_info"
        ],
        "properties": {
          "vault_standard_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `VaultInfoResponse` representing vault requirements, lockup, & vault token denom.",
        "type": "object",
        "required": [
          "info"
        ],
        "properties": {
          "info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Uint128` amount of vault tokens that will be returned for the passed in `amount` of base tokens.\n\nAllows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n\nMust return as close to and no more than the exact amount of vault tokens that would be minted in a deposit call in the same transaction. I.e. Deposit should return the same or more vault tokens as PreviewDeposit if called in the same transaction.",
        "type": "object",
        "required": [
          "preview_deposit"
        ],
        "properties": {
          "preview_deposit": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of base tokens to preview depositing.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Uint128` amount of base tokens that would be withdrawn in exchange for redeeming `amount` of vault tokens.\n\nAllows an on-chain or off-chain user to simulate the effects of their redeem at the current block, given current on-chain conditions.\n\nMust return as close to and no more than the exact amount of base tokens that would be withdrawn in a redeem call in the same transaction.",
        "type": "object",
        "required": [
          "preview_redeem"
        ],
        "properties": {
          "preview_redeem": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of vault tokens to preview redeeming.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the amount of assets managed by the vault denominated in base tokens. Useful for display purposes, and does not have to confer the exact amount of base tokens.",
        "type": "object",
        "required": [
          "total_assets"
        ],
        "properties": {
          "total_assets": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Uint128` total amount of vault tokens in circulation.",
        "type": "object",
        "required": [
          "total_vault_token_supply"
        ],
        "properties": {
          "total_vault_token_supply": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The amount of vault tokens that the vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of vault tokens returned by the vault if the passed in assets were deposited. This calculation should not reflect the \"per-user\" price-per-share, and instead should reflect the \"average-user’s\" price-per-share, meaning what the average user should expect to see when exchanging to and from.",
        "type": "object",
        "required": [
          "convert_to_shares"
        ],
        "properties": {
          "convert_to_shares": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of base tokens to convert to vault tokens.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the amount of base tokens that the Vault would exchange for the `amount` of vault tokens provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of assets returned by the vault if the passed in vault tokens were redeemed. This calculation should not reflect the \"per-user\" price-per-share, and instead should reflect the \"average-user’s\" price-per-share, meaning what the average user should expect to see when exchanging to and from.",
        "type": "object",
        "required": [
          "convert_to_assets"
        ],
        "properties": {
          "convert_to_assets": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of vault tokens to convert to base tokens.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Handle queries of any enabled extensions.",
        "type": "object",
        "required": [
          "vault_extension"
        ],
        "properties": {
          "vault_extension": {
            "$ref": "#/definitions/ExtensionQueryMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ExtensionQueryMsg": {
        "description": "Contains QueryMsgs of all enabled extensions. To enable extensions defined outside of this crate, you can define your own `ExtensionQueryMsg` type in your contract crate and pass it in as the generic parameter to QueryMsg",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lockup"
            ],
            "properties": {
              "lockup": {
                "$ref": "#/definitions/LockupQueryMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LockupQueryMsg": {
        "description": "Additional QueryMsg variants for vaults that enable the Lockup extension.",
        "oneOf": [
          {
            "description": "Returns a `Vec<UnlockingPosition>` containing all the currently unclaimed lockup positions for the `owner`.",
            "type": "object",
            "required": [
              "unlocking_positions"
            ],
            "properties": {
              "unlocking_positions": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "limit": {
                    "description": "Max amount of results to return",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "owner": {
                    "description": "The address of the owner of the lockup",
                    "type": "string"
                  },
                  "start_after": {
                    "description": "Return results only after this lockup_id",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns an `UnlockingPosition` info about a specific lockup, by owner and ID.",
            "type": "object",
            "required": [
              "unlocking_position"
            ],
            "properties": {
              "unlocking_position": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "lockup_id": {
                    "description": "The ID of the lockup to query",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns `cw_utils::Duration` duration of the lockup of the vault.",
            "type": "object",
            "required": [
              "lockup_duration"
            ],
            "properties": {
              "lockup_duration": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "convert_to_assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "convert_to_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultInfoResponse",
      "description": "Returned by QueryMsg::Info and contains information about this vault",
      "type": "object",
      "required": [
        "base_token",
        "vault_token"
      ],
      "properties": {
        "base_token": {
          "description": "The token that is accepted for deposits, withdrawals and used for accounting in the vault. The denom if it is a native token and the contract address if it is a cw20 token.",
          "type": "string"
        },
        "vault_token": {
          "description": "Vault token. The denom if it is a native token and the contract address if it is a cw20 token.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "preview_deposit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "preview_redeem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "total_assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "total_vault_token_supply": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "vault_extension": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Empty",
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "vault_standard_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultStandardInfoResponse",
      "description": "Struct returned from QueryMsg::VaultStandardInfo with information about the used version of the vault standard and any extensions used.\n\nThis struct should be stored as an Item under the `vault_standard_info` key, so that other contracts can do a RawQuery and read it directly from storage instead of needing to do a costly SmartQuery.",
      "type": "object",
      "required": [
        "extensions",
        "version"
      ],
      "properties": {
        "extensions": {
          "description": "A list of vault standard extensions used by the vault. E.g. [\"lockup\", \"keeper\"]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "The version of the vault standard used. A number, e.g. 1, 2, etc.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
