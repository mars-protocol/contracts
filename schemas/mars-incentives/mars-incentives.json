{
  "contract_name": "mars-incentives",
  "contract_version": "1.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "address_provider",
      "mars_denom",
      "owner"
    ],
    "properties": {
      "address_provider": {
        "description": "Address provider",
        "type": "string"
      },
      "mars_denom": {
        "description": "Mars token denom",
        "type": "string"
      },
      "owner": {
        "description": "Contract owner",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Set incentive params for an asset to its depositor at Red Bank.\n\nIf there is no incentive for the asset, all params are required. New incentive can be set (rescheduled) if current one has finished (current_block_time > start_time + duration).",
        "type": "object",
        "required": [
          "set_asset_incentive"
        ],
        "properties": {
          "set_asset_incentive": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "description": "Asset denom associated with the incentives",
                "type": "string"
              },
              "duration": {
                "description": "How many seconds the incentives last",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "emission_per_second": {
                "description": "How many MARS will be assigned per second to be distributed among all Red Bank depositors",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_time": {
                "description": "Start time of the incentive (in seconds) since the UNIX epoch (00:00:00 on 1970-01-01 UTC).",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Handle balance change updating user and asset rewards. Sent from an external contract, triggered on user balance changes. Will return an empty response if no incentive is applied for the asset",
        "type": "object",
        "required": [
          "balance_change"
        ],
        "properties": {
          "balance_change": {
            "type": "object",
            "required": [
              "denom",
              "total_amount_scaled_before",
              "user_addr",
              "user_amount_scaled_before"
            ],
            "properties": {
              "denom": {
                "description": "Denom of the asset of which deposited balance is changed",
                "type": "string"
              },
              "total_amount_scaled_before": {
                "description": "The market's total scaled collateral amount up to the instant before the change",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "user_addr": {
                "description": "User address. Address is trusted as it must be validated by the Red Bank contract before calling this method",
                "allOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  }
                ]
              },
              "user_amount_scaled_before": {
                "description": "The user's scaled collateral amount up to the instant before the change",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim rewards. MARS rewards accrued by the user will be staked into xMARS before being sent.",
        "type": "object",
        "required": [
          "claim_rewards"
        ],
        "properties": {
          "claim_rewards": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract config (only callable by owner)",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "address_provider": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "mars_denom": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Manages admin role state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query contract config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query info about asset incentive for a given denom",
        "type": "object",
        "required": [
          "asset_incentive"
        ],
        "properties": {
          "asset_incentive": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate asset incentives with pagination",
        "type": "object",
        "required": [
          "asset_incentives"
        ],
        "properties": {
          "asset_incentives": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query user current unclaimed rewards",
        "type": "object",
        "required": [
          "user_unclaimed_rewards"
        ],
        "properties": {
          "user_unclaimed_rewards": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "asset_incentive": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetIncentiveResponse",
      "description": "Incentive Metadata for a given incentive denom",
      "type": "object",
      "required": [
        "denom",
        "duration",
        "emission_per_second",
        "index",
        "last_updated",
        "start_time"
      ],
      "properties": {
        "denom": {
          "description": "Asset denom",
          "type": "string"
        },
        "duration": {
          "description": "How many seconds the incentives last",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "emission_per_second": {
          "description": "How much MARS per second is emitted to be then distributed to all Red Bank depositors",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "index": {
          "description": "Total MARS assigned for distribution since the start of the incentive",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "last_updated": {
          "description": "Last time (in seconds) index was updated",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "description": "Start time of the incentive (in seconds) since the UNIX epoch (00:00:00 on 1970-01-01 UTC)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "asset_incentives": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_AssetIncentiveResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetIncentiveResponse"
      },
      "definitions": {
        "AssetIncentiveResponse": {
          "description": "Incentive Metadata for a given incentive denom",
          "type": "object",
          "required": [
            "denom",
            "duration",
            "emission_per_second",
            "index",
            "last_updated",
            "start_time"
          ],
          "properties": {
            "denom": {
              "description": "Asset denom",
              "type": "string"
            },
            "duration": {
              "description": "How many seconds the incentives last",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "emission_per_second": {
              "description": "How much MARS per second is emitted to be then distributed to all Red Bank depositors",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "index": {
              "description": "Total MARS assigned for distribution since the start of the incentive",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "last_updated": {
              "description": "Last time (in seconds) index was updated",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_time": {
              "description": "Start time of the incentive (in seconds) since the UNIX epoch (00:00:00 on 1970-01-01 UTC)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "address_provider",
        "mars_denom"
      ],
      "properties": {
        "address_provider": {
          "description": "Address provider",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "mars_denom": {
          "description": "Mars Token Denom",
          "type": "string"
        },
        "owner": {
          "description": "The contract's owner",
          "type": [
            "string",
            "null"
          ]
        },
        "proposed_new_owner": {
          "description": "The contract's proposed owner",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "user_unclaimed_rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
