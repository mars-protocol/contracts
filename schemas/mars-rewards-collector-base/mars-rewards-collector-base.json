{
  "contract_name": "mars-rewards-collector-base",
  "contract_version": "2.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "address_provider",
      "channel_id",
      "fee_collector_denom",
      "owner",
      "safety_fund_denom",
      "safety_tax_rate",
      "slippage_tolerance",
      "timeout_seconds"
    ],
    "properties": {
      "address_provider": {
        "description": "Address provider returns addresses for all protocol contracts",
        "type": "string"
      },
      "channel_id": {
        "description": "The channel ID of the mars hub",
        "type": "string"
      },
      "fee_collector_denom": {
        "description": "The asset to which the fee collector share is converted",
        "type": "string"
      },
      "neutron_ibc_config": {
        "description": "Neutron Ibc config",
        "anyOf": [
          {
            "$ref": "#/definitions/NeutronIbcConfig"
          },
          {
            "type": "null"
          }
        ]
      },
      "owner": {
        "description": "The contract's owner",
        "type": "string"
      },
      "safety_fund_denom": {
        "description": "The asset to which the safety fund share is converted",
        "type": "string"
      },
      "safety_tax_rate": {
        "description": "Percentage of fees that are sent to the safety fund",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "slippage_tolerance": {
        "description": "Maximum percentage of price movement (minimum amount you accept to receive during swap)",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "timeout_seconds": {
        "description": "Number of seconds after which an IBC transfer is to be considered failed, if no acknowledgement is received",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "NeutronIbcConfig": {
        "type": "object",
        "required": [
          "acc_fee",
          "source_port",
          "timeout_fee"
        ],
        "properties": {
          "acc_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "source_port": {
            "type": "string"
          },
          "timeout_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Manages admin role state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract config",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "new_cfg"
            ],
            "properties": {
              "new_cfg": {
                "$ref": "#/definitions/UpdateConfig"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw coins from the red bank",
        "type": "object",
        "required": [
          "withdraw_from_red_bank"
        ],
        "properties": {
          "withdraw_from_red_bank": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw coins from the credit manager",
        "type": "object",
        "required": [
          "withdraw_from_credit_manager"
        ],
        "properties": {
          "withdraw_from_credit_manager": {
            "type": "object",
            "required": [
              "account_id",
              "actions"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Action"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Distribute the accrued protocol income between the safety fund and the fee modules on mars hub, according to the split set in config. Callable by any address.",
        "type": "object",
        "required": [
          "distribute_rewards"
        ],
        "properties": {
          "distribute_rewards": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Swap any asset on the contract",
        "type": "object",
        "required": [
          "swap_asset"
        ],
        "properties": {
          "swap_asset": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "denom": {
                "type": "string"
              },
              "fee_collector_min_receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fee_collector_route": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapperRoute"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "safety_fund_min_receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "safety_fund_route": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapperRoute"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim rewards in incentives contract.\n\nWe wanted to leave protocol rewards in the red-bank so they continue to work as liquidity (until the bot invokes WithdrawFromRedBank). As an side effect to this, if the market is incentivised with MARS tokens, the contract will also accrue MARS token incentives.",
        "type": "object",
        "required": [
          "claim_incentive_rewards"
        ],
        "properties": {
          "claim_incentive_rewards": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "The maximum number of results to return. If not set, 5 is used. If larger than 10, 10 is used.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after_collateral_denom": {
                "description": "Start pagination after this collateral denom",
                "type": [
                  "string",
                  "null"
                ]
              },
              "start_after_incentive_denom": {
                "description": "Start pagination after this incentive denom. If supplied you must also supply start_after_collateral_denom.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "The list of actions that users can perform on their positions",
        "oneOf": [
          {
            "description": "Deposit coin of specified denom and amount. Verifies if the correct amount is sent with transaction.",
            "type": "object",
            "required": [
              "deposit"
            ],
            "properties": {
              "deposit": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw coin of specified denom and amount",
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "$ref": "#/definitions/ActionCoin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw coin of specified denom and amount to a wallet address",
            "type": "object",
            "required": [
              "withdraw_to_wallet"
            ],
            "properties": {
              "withdraw_to_wallet": {
                "type": "object",
                "required": [
                  "coin",
                  "recipient"
                ],
                "properties": {
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "recipient": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Borrow coin of specified amount from Red Bank",
            "type": "object",
            "required": [
              "borrow"
            ],
            "properties": {
              "borrow": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Lend coin to the Red Bank",
            "type": "object",
            "required": [
              "lend"
            ],
            "properties": {
              "lend": {
                "$ref": "#/definitions/ActionCoin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Reclaim the coins that were lent to the Red Bank.",
            "type": "object",
            "required": [
              "reclaim"
            ],
            "properties": {
              "reclaim": {
                "$ref": "#/definitions/ActionCoin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "For assets lent to the Red Bank, some can accumulate incentive rewards. This message claims all of them adds them to account balance.",
            "type": "object",
            "required": [
              "claim_rewards"
            ],
            "properties": {
              "claim_rewards": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Repay coin of specified amount back to Red Bank. If `amount: AccountBalance` is passed, the repaid amount will be the minimum between account balance for denom and total owed. The sender will repay on behalf of the recipient account. If 'recipient_account_id: None', the sender repays to its own account.",
            "type": "object",
            "required": [
              "repay"
            ],
            "properties": {
              "repay": {
                "type": "object",
                "required": [
                  "coin"
                ],
                "properties": {
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "recipient_account_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Deposit coins into vault strategy If `coin.amount: AccountBalance`, Rover attempts to deposit the account's entire balance into the vault",
            "type": "object",
            "required": [
              "enter_vault"
            ],
            "properties": {
              "enter_vault": {
                "type": "object",
                "required": [
                  "coin",
                  "vault"
                ],
                "properties": {
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw underlying coins from vault",
            "type": "object",
            "required": [
              "exit_vault"
            ],
            "properties": {
              "exit_vault": {
                "type": "object",
                "required": [
                  "amount",
                  "vault"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Requests unlocking of shares for a vault with a required lock period",
            "type": "object",
            "required": [
              "request_vault_unlock"
            ],
            "properties": {
              "request_vault_unlock": {
                "type": "object",
                "required": [
                  "amount",
                  "vault"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraws the assets for unlocking position id from vault. Required time must have elapsed.",
            "type": "object",
            "required": [
              "exit_vault_unlocked"
            ],
            "properties": {
              "exit_vault_unlocked": {
                "type": "object",
                "required": [
                  "id",
                  "vault"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable rover account for a via liquidating a specific type of the position.",
            "type": "object",
            "required": [
              "liquidate"
            ],
            "properties": {
              "liquidate": {
                "type": "object",
                "required": [
                  "debt_coin",
                  "liquidatee_account_id",
                  "request"
                ],
                "properties": {
                  "debt_coin": {
                    "description": "The coin they wish to acquire from the liquidatee (amount returned will include the bonus)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "liquidatee_account_id": {
                    "description": "The credit account id of the one with a liquidation threshold health factor 1 or below",
                    "type": "string"
                  },
                  "request": {
                    "description": "Position details to be liquidated",
                    "allOf": [
                      {
                        "$ref": "#/definitions/LiquidateRequest_for_VaultBase_for_String"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Perform a swapper with an exact-in amount. Requires slippage allowance %. If `coin_in.amount: AccountBalance`, the accounts entire balance of `coin_in.denom` will be used.",
            "type": "object",
            "required": [
              "swap_exact_in"
            ],
            "properties": {
              "swap_exact_in": {
                "type": "object",
                "required": [
                  "coin_in",
                  "denom_out",
                  "min_receive"
                ],
                "properties": {
                  "coin_in": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "denom_out": {
                    "type": "string"
                  },
                  "min_receive": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "route": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SwapperRoute"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Add Vec<Coin> to liquidity pool in exchange for LP tokens. Slippage allowance (%) is used to calculate the minimum amount of LP tokens to receive.",
            "type": "object",
            "required": [
              "provide_liquidity"
            ],
            "properties": {
              "provide_liquidity": {
                "type": "object",
                "required": [
                  "coins_in",
                  "lp_token_out",
                  "slippage"
                ],
                "properties": {
                  "coins_in": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ActionCoin"
                    }
                  },
                  "lp_token_out": {
                    "type": "string"
                  },
                  "slippage": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Send LP token and withdraw corresponding reserve assets from pool. If `lp_token.amount: AccountBalance`, the account balance of `lp_token.denom` will be used. /// Slippage allowance (%) is used to calculate the minimum amount of reserve assets to receive.",
            "type": "object",
            "required": [
              "withdraw_liquidity"
            ],
            "properties": {
              "withdraw_liquidity": {
                "type": "object",
                "required": [
                  "lp_token",
                  "slippage"
                ],
                "properties": {
                  "lp_token": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "slippage": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Stake lp token in astroport incentives contract via mars incentives",
            "type": "object",
            "required": [
              "stake_astro_lp"
            ],
            "properties": {
              "stake_astro_lp": {
                "type": "object",
                "required": [
                  "lp_token"
                ],
                "properties": {
                  "lp_token": {
                    "$ref": "#/definitions/ActionCoin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Unstake lp token from astroport incentives contract via mars incentives",
            "type": "object",
            "required": [
              "unstake_astro_lp"
            ],
            "properties": {
              "unstake_astro_lp": {
                "type": "object",
                "required": [
                  "lp_token"
                ],
                "properties": {
                  "lp_token": {
                    "$ref": "#/definitions/ActionCoin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Claim accrued LP incentive rewards from astroport incentives contract via mars incentives",
            "type": "object",
            "required": [
              "claim_astro_lp_rewards"
            ],
            "properties": {
              "claim_astro_lp_rewards": {
                "type": "object",
                "required": [
                  "lp_denom"
                ],
                "properties": {
                  "lp_denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Refunds all coin balances back to user wallet",
            "type": "object",
            "required": [
              "refund_all_coin_balances"
            ],
            "properties": {
              "refund_all_coin_balances": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionAmount": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "account_balance"
            ]
          },
          {
            "type": "object",
            "required": [
              "exact"
            ],
            "properties": {
              "exact": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionCoin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/ActionAmount"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AstroRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "description": "The swap operations of the route",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AstroSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "AstroSwap": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "description": "Asset to swap from",
            "type": "string"
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "LiquidateRequest_for_VaultBase_for_String": {
        "oneOf": [
          {
            "description": "Pay back debt of a liquidatable rover account for a bonus. Requires specifying 1) the debt denom/amount of what the liquidator wants to payoff and 2) the request coin denom which the liquidatee should have a balance of. The amount returned to liquidator will be the request coin of the amount that precisely matches the value of the debt + a liquidation bonus. The debt amount will be adjusted down if: - Exceeds liquidatee's total debt for denom - Not enough liquidatee request coin balance to match - The value of the debt repaid exceeds the maximum close factor %\n\nLiquidation should prioritize first the not lent coin and if more needs to be serviced to the liquidator it should reclaim (withdrawn from Red Bank).",
            "type": "object",
            "required": [
              "deposit"
            ],
            "properties": {
              "deposit": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable rover account for a via liquidating a Lent position. Lent shares are transfered from the liquidatable to the liquidator.",
            "type": "object",
            "required": [
              "lend"
            ],
            "properties": {
              "lend": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable rover account for a via liquidating a vault position. Similar to `Deposit` msg and will make similar adjustments to the request. The vault position will be withdrawn (and force withdrawn if a locked vault position) and the underlying assets will transferred to the liquidator. The `VaultPositionType` will determine which bucket to liquidate from.",
            "type": "object",
            "required": [
              "vault"
            ],
            "properties": {
              "vault": {
                "type": "object",
                "required": [
                  "position_type",
                  "request_vault"
                ],
                "properties": {
                  "position_type": {
                    "$ref": "#/definitions/VaultPositionType"
                  },
                  "request_vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable credit manager account for a via liquidating an Astro LP position. LP shares are transfered from the liquidatable to the liquidator.",
            "type": "object",
            "required": [
              "staked_astro_lp"
            ],
            "properties": {
              "staked_astro_lp": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "NeutronIbcConfig": {
        "type": "object",
        "required": [
          "acc_fee",
          "source_port",
          "timeout_fee"
        ],
        "properties": {
          "acc_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "source_port": {
            "type": "string"
          },
          "timeout_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "OsmoRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OsmoSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "OsmoSwap": {
        "description": "Swap operation with pool id and asset to swap to. \"from\" is another asset in the pool.",
        "type": "object",
        "required": [
          "pool_id",
          "to"
        ],
        "properties": {
          "pool_id": {
            "description": "Pool id",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      },
      "SwapperRoute": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "astro"
            ],
            "properties": {
              "astro": {
                "$ref": "#/definitions/AstroRoute"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "osmo"
            ],
            "properties": {
              "osmo": {
                "$ref": "#/definitions/OsmoRoute"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UpdateConfig": {
        "type": "object",
        "properties": {
          "address_provider": {
            "description": "Address provider returns addresses for all protocol contracts",
            "type": [
              "string",
              "null"
            ]
          },
          "channel_id": {
            "description": "The channel id of the mars hub",
            "type": [
              "string",
              "null"
            ]
          },
          "fee_collector_denom": {
            "description": "The asset to which the fee collector share is converted",
            "type": [
              "string",
              "null"
            ]
          },
          "neutron_ibc_config": {
            "description": "Neutron Ibc config",
            "anyOf": [
              {
                "$ref": "#/definitions/NeutronIbcConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "safety_fund_denom": {
            "description": "The asset to which the safety fund share is converted",
            "type": [
              "string",
              "null"
            ]
          },
          "safety_tax_rate": {
            "description": "Percentage of fees that are sent to the safety fund",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "slippage_tolerance": {
            "description": "Maximum percentage of price movement (minimum amount you accept to receive during swap)",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout_seconds": {
            "description": "Number of seconds after which an IBC transfer is to be considered failed, if no acknowledgement is received",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "VaultBase_for_String": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VaultPositionType": {
        "type": "string",
        "enum": [
          "u_n_l_o_c_k_e_d",
          "l_o_c_k_e_d",
          "u_n_l_o_c_k_i_n_g"
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Get config parameters",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "address_provider",
        "channel_id",
        "fee_collector_denom",
        "safety_fund_denom",
        "safety_tax_rate",
        "slippage_tolerance",
        "timeout_seconds"
      ],
      "properties": {
        "address_provider": {
          "description": "Address provider returns addresses for all protocol contracts",
          "type": "string"
        },
        "channel_id": {
          "description": "The channel ID of the mars hub",
          "type": "string"
        },
        "fee_collector_denom": {
          "description": "The asset to which the fee collector share is converted",
          "type": "string"
        },
        "neutron_ibc_config": {
          "description": "Neutron Ibc config",
          "anyOf": [
            {
              "$ref": "#/definitions/NeutronIbcConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "owner": {
          "description": "The contract's owner",
          "type": [
            "string",
            "null"
          ]
        },
        "proposed_new_owner": {
          "description": "The contract's proposed owner",
          "type": [
            "string",
            "null"
          ]
        },
        "safety_fund_denom": {
          "description": "The asset to which the safety fund share is converted",
          "type": "string"
        },
        "safety_tax_rate": {
          "description": "Percentage of fees that are sent to the safety fund",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slippage_tolerance": {
          "description": "Maximum percentage of price movement (minimum amount you accept to receive during swap)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "timeout_seconds": {
          "description": "Number of seconds after which an IBC transfer is to be considered failed, if no acknowledgement is received",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "NeutronIbcConfig": {
          "type": "object",
          "required": [
            "acc_fee",
            "source_port",
            "timeout_fee"
          ],
          "properties": {
            "acc_fee": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "source_port": {
              "type": "string"
            },
            "timeout_fee": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
