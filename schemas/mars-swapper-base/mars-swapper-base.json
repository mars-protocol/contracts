{
  "contract_name": "mars-swapper-base",
  "contract_version": "2.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "owner"
    ],
    "properties": {
      "owner": {
        "description": "The contract's owner, who can update config",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Manges owner role state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Configure the route for swapping an asset\n\nThis is chain-specific, and can include parameters such as slippage tolerance and the routes for multi-step swaps",
        "type": "object",
        "required": [
          "set_route"
        ],
        "properties": {
          "set_route": {
            "type": "object",
            "required": [
              "denom_in",
              "denom_out",
              "route"
            ],
            "properties": {
              "denom_in": {
                "type": "string"
              },
              "denom_out": {
                "type": "string"
              },
              "route": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Perform a swapper with an exact-in amount",
        "type": "object",
        "required": [
          "swap_exact_in"
        ],
        "properties": {
          "swap_exact_in": {
            "type": "object",
            "required": [
              "coin_in",
              "denom_out",
              "min_receive"
            ],
            "properties": {
              "coin_in": {
                "$ref": "#/definitions/Coin"
              },
              "denom_out": {
                "type": "string"
              },
              "min_receive": {
                "$ref": "#/definitions/Uint128"
              },
              "route": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapperRoute"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Send swapper results back to swapper. Also refunds extra if sent more than needed. Internal use only.",
        "type": "object",
        "required": [
          "transfer_result"
        ],
        "properties": {
          "transfer_result": {
            "type": "object",
            "required": [
              "denom_in",
              "denom_out",
              "recipient"
            ],
            "properties": {
              "denom_in": {
                "type": "string"
              },
              "denom_out": {
                "type": "string"
              },
              "recipient": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AstroRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "description": "The swap operations of the route",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AstroSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "AstroSwap": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "description": "Asset to swap from",
            "type": "string"
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "OsmoRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OsmoSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "OsmoSwap": {
        "description": "Swap operation with pool id and asset to swap to. \"from\" is another asset in the pool.",
        "type": "object",
        "required": [
          "pool_id",
          "to"
        ],
        "properties": {
          "pool_id": {
            "description": "Pool id",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      },
      "SwapperRoute": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "astro"
            ],
            "properties": {
              "astro": {
                "$ref": "#/definitions/AstroRoute"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "osmo"
            ],
            "properties": {
              "osmo": {
                "$ref": "#/definitions/OsmoRoute"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query contract owner config",
        "type": "object",
        "required": [
          "owner"
        ],
        "properties": {
          "owner": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get route for swapping an input denom into an output denom",
        "type": "object",
        "required": [
          "route"
        ],
        "properties": {
          "route": {
            "type": "object",
            "required": [
              "denom_in",
              "denom_out"
            ],
            "properties": {
              "denom_in": {
                "type": "string"
              },
              "denom_out": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all swapper routes",
        "type": "object",
        "required": [
          "routes"
        ],
        "properties": {
          "routes": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return current spot price swapping In for Out Warning: Do not use this as an oracle price feed. Use Mars-Oracle for pricing.",
        "type": "object",
        "required": [
          "estimate_exact_in_swap"
        ],
        "properties": {
          "estimate_exact_in_swap": {
            "type": "object",
            "required": [
              "coin_in",
              "denom_out"
            ],
            "properties": {
              "coin_in": {
                "$ref": "#/definitions/Coin"
              },
              "denom_out": {
                "type": "string"
              },
              "route": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapperRoute"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query contract config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AstroRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "description": "The swap operations of the route",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AstroSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "AstroSwap": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "description": "Asset to swap from",
            "type": "string"
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "OsmoRoute": {
        "type": "object",
        "required": [
          "swaps"
        ],
        "properties": {
          "swaps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OsmoSwap"
            }
          }
        },
        "additionalProperties": false
      },
      "OsmoSwap": {
        "description": "Swap operation with pool id and asset to swap to. \"from\" is another asset in the pool.",
        "type": "object",
        "required": [
          "pool_id",
          "to"
        ],
        "properties": {
          "pool_id": {
            "description": "Pool id",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "to": {
            "description": "Asset to swap to",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SwapperRoute": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "astro"
            ],
            "properties": {
              "astro": {
                "$ref": "#/definitions/AstroRoute"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "osmo"
            ],
            "properties": {
              "osmo": {
                "$ref": "#/definitions/OsmoRoute"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Empty",
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "estimate_exact_in_swap": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EstimateExactInSwapResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "owner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerResponse",
      "description": "Returned from Owner.query()",
      "type": "object",
      "required": [
        "abolished",
        "initialized"
      ],
      "properties": {
        "abolished": {
          "type": "boolean"
        },
        "emergency_owner": {
          "type": [
            "string",
            "null"
          ]
        },
        "initialized": {
          "type": "boolean"
        },
        "owner": {
          "type": [
            "string",
            "null"
          ]
        },
        "proposed": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "route": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RouteResponse_for_Empty",
      "type": "object",
      "required": [
        "denom_in",
        "denom_out",
        "route"
      ],
      "properties": {
        "denom_in": {
          "type": "string"
        },
        "denom_out": {
          "type": "string"
        },
        "route": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        }
      }
    },
    "routes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_RouteResponse_for_Empty",
      "type": "array",
      "items": {
        "$ref": "#/definitions/RouteResponse_for_Empty"
      },
      "definitions": {
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "RouteResponse_for_Empty": {
          "type": "object",
          "required": [
            "denom_in",
            "denom_out",
            "route"
          ],
          "properties": {
            "denom_in": {
              "type": "string"
            },
            "denom_out": {
              "type": "string"
            },
            "route": {
              "$ref": "#/definitions/Empty"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
