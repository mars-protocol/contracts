{
  "contract_name": "mars-red-bank",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "config",
      "owner"
    ],
    "properties": {
      "config": {
        "description": "Market configuration",
        "allOf": [
          {
            "$ref": "#/definitions/CreateOrUpdateConfig"
          }
        ]
      },
      "owner": {
        "description": "Contract's owner",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "CreateOrUpdateConfig": {
        "type": "object",
        "properties": {
          "address_provider": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Manages owner state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract config (only owner can call)",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "$ref": "#/definitions/CreateOrUpdateConfig"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Initialize an asset on the money market (only owner can call)",
        "type": "object",
        "required": [
          "init_asset"
        ],
        "properties": {
          "init_asset": {
            "type": "object",
            "required": [
              "denom",
              "params"
            ],
            "properties": {
              "denom": {
                "description": "Asset related info",
                "type": "string"
              },
              "params": {
                "description": "Asset parameters",
                "allOf": [
                  {
                    "$ref": "#/definitions/InitOrUpdateAssetParams"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update an asset on the money market (only owner can call)",
        "type": "object",
        "required": [
          "update_asset"
        ],
        "properties": {
          "update_asset": {
            "type": "object",
            "required": [
              "denom",
              "params"
            ],
            "properties": {
              "denom": {
                "description": "Asset related info",
                "type": "string"
              },
              "params": {
                "description": "Asset parameters",
                "allOf": [
                  {
                    "$ref": "#/definitions/InitOrUpdateAssetParams"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update uncollateralized loan limit for a given user and asset. Overrides previous value if any. A limit of zero means no uncollateralized limit and the debt in that asset needs to be collateralized (only owner can call)",
        "type": "object",
        "required": [
          "update_uncollateralized_loan_limit"
        ],
        "properties": {
          "update_uncollateralized_loan_limit": {
            "type": "object",
            "required": [
              "denom",
              "new_limit",
              "user"
            ],
            "properties": {
              "denom": {
                "description": "Asset the user receives the credit in",
                "type": "string"
              },
              "new_limit": {
                "description": "Limit for the uncolateralize loan.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "user": {
                "description": "Address that receives the credit",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Deposit native coins. Deposited coins must be sent in the transaction this call is made",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "properties": {
              "account_id": {
                "description": "Credit account id (Rover)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "on_behalf_of": {
                "description": "Address that will receive the coins",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw native coins",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "account_id": {
                "description": "Credit account id (Rover)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "amount": {
                "description": "Amount to be withdrawn. If None is specified, the full amount will be withdrawn.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "denom": {
                "description": "Asset to withdraw",
                "type": "string"
              },
              "liquidation_related": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "recipient": {
                "description": "The address where the withdrawn amount is sent",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Borrow native coins. If borrow allowed, amount is added to caller's debt and sent to the address.",
        "type": "object",
        "required": [
          "borrow"
        ],
        "properties": {
          "borrow": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "description": "Amount to borrow",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "denom": {
                "description": "Asset to borrow",
                "type": "string"
              },
              "recipient": {
                "description": "The address where the borrowed amount is sent",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Repay native coins loan. Coins used to repay must be sent in the transaction this call is made.",
        "type": "object",
        "required": [
          "repay"
        ],
        "properties": {
          "repay": {
            "type": "object",
            "properties": {
              "on_behalf_of": {
                "description": "Repay the funds for the user",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Liquidate under-collateralized native loans. Coins used to repay must be sent in the transaction this call is made.\n\nThe liquidator will receive collateral shares. To get the underlying asset, consider sending a separate `withdraw` execute message.",
        "type": "object",
        "required": [
          "liquidate"
        ],
        "properties": {
          "liquidate": {
            "type": "object",
            "required": [
              "collateral_denom",
              "user"
            ],
            "properties": {
              "collateral_denom": {
                "description": "Denom of the collateral asset, which liquidator gets from the borrower",
                "type": "string"
              },
              "recipient": {
                "description": "The address for receiving underlying collateral",
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "description": "The address of the borrower getting liquidated",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update (enable / disable) asset as collateral for the caller",
        "type": "object",
        "required": [
          "update_asset_collateral_status"
        ],
        "properties": {
          "update_asset_collateral_status": {
            "type": "object",
            "required": [
              "denom",
              "enable"
            ],
            "properties": {
              "denom": {
                "description": "Asset to update status for",
                "type": "string"
              },
              "enable": {
                "description": "Option to enable (true) / disable (false) asset as collateral",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "migrate"
        ],
        "properties": {
          "migrate": {
            "$ref": "#/definitions/MigrateV1ToV2"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "CreateOrUpdateConfig": {
        "type": "object",
        "properties": {
          "address_provider": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "InitOrUpdateAssetParams": {
        "type": "object",
        "properties": {
          "interest_rate_model": {
            "description": "Interest rate strategy to calculate borrow_rate and liquidity_rate",
            "anyOf": [
              {
                "$ref": "#/definitions/InterestRateModel"
              },
              {
                "type": "null"
              }
            ]
          },
          "reserve_factor": {
            "description": "Portion of the borrow rate that is kept as protocol rewards",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "InterestRateModel": {
        "type": "object",
        "required": [
          "base",
          "optimal_utilization_rate",
          "slope_1",
          "slope_2"
        ],
        "properties": {
          "base": {
            "description": "Base rate",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "optimal_utilization_rate": {
            "description": "Optimal utilization rate",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "slope_1": {
            "description": "Slope parameter for interest rate model function when utilization_rate <= optimal_utilization_rate",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "slope_2": {
            "description": "Slope parameter for interest rate model function when utilization_rate > optimal_utilization_rate",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MigrateV1ToV2": {
        "description": "Migrate from V1 to V2, only owner can call",
        "oneOf": [
          {
            "description": "Migrate collaterals in batches",
            "type": "object",
            "required": [
              "collaterals"
            ],
            "properties": {
              "collaterals": {
                "type": "object",
                "required": [
                  "limit"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears old V1 state once all batches are migrated or after a certain time",
            "type": "object",
            "required": [
              "clear_v1_state"
            ],
            "properties": {
              "clear_v1_state": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Get config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get asset market",
        "type": "object",
        "required": [
          "market"
        ],
        "properties": {
          "market": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate markets with pagination",
        "type": "object",
        "required": [
          "markets"
        ],
        "properties": {
          "markets": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get uncollateralized limit for given user and asset",
        "type": "object",
        "required": [
          "uncollateralized_loan_limit"
        ],
        "properties": {
          "uncollateralized_loan_limit": {
            "type": "object",
            "required": [
              "denom",
              "user"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all uncollateralized limits for a given user",
        "type": "object",
        "required": [
          "uncollateralized_loan_limits"
        ],
        "properties": {
          "uncollateralized_loan_limits": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get user debt position for a specific asset",
        "type": "object",
        "required": [
          "user_debt"
        ],
        "properties": {
          "user_debt": {
            "type": "object",
            "required": [
              "denom",
              "user"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all debt positions for a user",
        "type": "object",
        "required": [
          "user_debts"
        ],
        "properties": {
          "user_debts": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get user collateral position for a specific asset",
        "type": "object",
        "required": [
          "user_collateral"
        ],
        "properties": {
          "user_collateral": {
            "type": "object",
            "required": [
              "denom",
              "user"
            ],
            "properties": {
              "account_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "denom": {
                "type": "string"
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collateral positions for a user",
        "type": "object",
        "required": [
          "user_collaterals"
        ],
        "properties": {
          "user_collaterals": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "account_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collateral positions for a user",
        "type": "object",
        "required": [
          "user_collaterals_v2"
        ],
        "properties": {
          "user_collaterals_v2": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "account_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get user position",
        "type": "object",
        "required": [
          "user_position"
        ],
        "properties": {
          "user_position": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "account_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get user position for liquidation",
        "type": "object",
        "required": [
          "user_position_liquidation_pricing"
        ],
        "properties": {
          "user_position_liquidation_pricing": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "account_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get liquidity scaled amount for a given underlying asset amount. (i.e: how much scaled collateral is added if the given amount is deposited)",
        "type": "object",
        "required": [
          "scaled_liquidity_amount"
        ],
        "properties": {
          "scaled_liquidity_amount": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get equivalent scaled debt for a given underlying asset amount. (i.e: how much scaled debt is added if the given amount is borrowed)",
        "type": "object",
        "required": [
          "scaled_debt_amount"
        ],
        "properties": {
          "scaled_debt_amount": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get underlying asset amount for a given asset and scaled amount. (i.e. How much underlying asset will be released if withdrawing by burning a given scaled collateral amount stored in state.)",
        "type": "object",
        "required": [
          "underlying_liquidity_amount"
        ],
        "properties": {
          "underlying_liquidity_amount": {
            "type": "object",
            "required": [
              "amount_scaled",
              "denom"
            ],
            "properties": {
              "amount_scaled": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get underlying debt amount for a given asset and scaled amounts. (i.e: How much underlying asset needs to be repaid to cancel a given scaled debt amount stored in state)",
        "type": "object",
        "required": [
          "underlying_debt_amount"
        ],
        "properties": {
          "underlying_debt_amount": {
            "type": "object",
            "required": [
              "amount_scaled",
              "denom"
            ],
            "properties": {
              "amount_scaled": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "address_provider"
      ],
      "properties": {
        "address_provider": {
          "description": "Address provider returns addresses for all protocol contracts",
          "type": "string"
        },
        "owner": {
          "description": "The contract's owner",
          "type": [
            "string",
            "null"
          ]
        },
        "proposed_new_owner": {
          "description": "The contract's proposed owner",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "market": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Market",
      "type": "object",
      "required": [
        "borrow_index",
        "borrow_rate",
        "collateral_total_scaled",
        "debt_total_scaled",
        "denom",
        "indexes_last_updated",
        "interest_rate_model",
        "liquidity_index",
        "liquidity_rate",
        "reserve_factor"
      ],
      "properties": {
        "borrow_index": {
          "description": "Borrow index (Used to compute borrow interest)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "borrow_rate": {
          "description": "Rate charged to borrowers",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "collateral_total_scaled": {
          "description": "Total collateral scaled for the market's currency",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "debt_total_scaled": {
          "description": "Total debt scaled for the market's currency",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "description": "Denom of the asset",
          "type": "string"
        },
        "indexes_last_updated": {
          "description": "Timestamp (seconds) where indexes and where last updated",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "interest_rate_model": {
          "description": "model (params + internal state) that defines how interest rate behaves",
          "allOf": [
            {
              "$ref": "#/definitions/InterestRateModel"
            }
          ]
        },
        "liquidity_index": {
          "description": "Liquidity index (Used to compute deposit interest)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "liquidity_rate": {
          "description": "Rate paid to depositors",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "reserve_factor": {
          "description": "Portion of the borrow rate that is kept as protocol rewards",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "InterestRateModel": {
          "type": "object",
          "required": [
            "base",
            "optimal_utilization_rate",
            "slope_1",
            "slope_2"
          ],
          "properties": {
            "base": {
              "description": "Base rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "optimal_utilization_rate": {
              "description": "Optimal utilization rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_1": {
              "description": "Slope parameter for interest rate model function when utilization_rate <= optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_2": {
              "description": "Slope parameter for interest rate model function when utilization_rate > optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "markets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Market",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Market"
      },
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "InterestRateModel": {
          "type": "object",
          "required": [
            "base",
            "optimal_utilization_rate",
            "slope_1",
            "slope_2"
          ],
          "properties": {
            "base": {
              "description": "Base rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "optimal_utilization_rate": {
              "description": "Optimal utilization rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_1": {
              "description": "Slope parameter for interest rate model function when utilization_rate <= optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_2": {
              "description": "Slope parameter for interest rate model function when utilization_rate > optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Market": {
          "type": "object",
          "required": [
            "borrow_index",
            "borrow_rate",
            "collateral_total_scaled",
            "debt_total_scaled",
            "denom",
            "indexes_last_updated",
            "interest_rate_model",
            "liquidity_index",
            "liquidity_rate",
            "reserve_factor"
          ],
          "properties": {
            "borrow_index": {
              "description": "Borrow index (Used to compute borrow interest)",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "borrow_rate": {
              "description": "Rate charged to borrowers",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "collateral_total_scaled": {
              "description": "Total collateral scaled for the market's currency",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "debt_total_scaled": {
              "description": "Total debt scaled for the market's currency",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Denom of the asset",
              "type": "string"
            },
            "indexes_last_updated": {
              "description": "Timestamp (seconds) where indexes and where last updated",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "interest_rate_model": {
              "description": "model (params + internal state) that defines how interest rate behaves",
              "allOf": [
                {
                  "$ref": "#/definitions/InterestRateModel"
                }
              ]
            },
            "liquidity_index": {
              "description": "Liquidity index (Used to compute deposit interest)",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "liquidity_rate": {
              "description": "Rate paid to depositors",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "reserve_factor": {
              "description": "Portion of the borrow rate that is kept as protocol rewards",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "scaled_debt_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "scaled_liquidity_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "uncollateralized_loan_limit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UncollateralizedLoanLimitResponse",
      "type": "object",
      "required": [
        "denom",
        "limit"
      ],
      "properties": {
        "denom": {
          "description": "Asset denom",
          "type": "string"
        },
        "limit": {
          "description": "Uncollateralized loan limit in this asset",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "uncollateralized_loan_limits": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UncollateralizedLoanLimitResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UncollateralizedLoanLimitResponse"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UncollateralizedLoanLimitResponse": {
          "type": "object",
          "required": [
            "denom",
            "limit"
          ],
          "properties": {
            "denom": {
              "description": "Asset denom",
              "type": "string"
            },
            "limit": {
              "description": "Uncollateralized loan limit in this asset",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "underlying_debt_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "underlying_liquidity_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "user_collateral": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserCollateralResponse",
      "type": "object",
      "required": [
        "amount",
        "amount_scaled",
        "denom",
        "enabled"
      ],
      "properties": {
        "amount": {
          "description": "Underlying asset amount that is actually deposited at the current block",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "amount_scaled": {
          "description": "Scaled collateral amount stored in contract state",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "description": "Asset denom",
          "type": "string"
        },
        "enabled": {
          "description": "Wether the user is using asset as collateral or not",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_collaterals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UserCollateralResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserCollateralResponse"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserCollateralResponse": {
          "type": "object",
          "required": [
            "amount",
            "amount_scaled",
            "denom",
            "enabled"
          ],
          "properties": {
            "amount": {
              "description": "Underlying asset amount that is actually deposited at the current block",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "amount_scaled": {
              "description": "Scaled collateral amount stored in contract state",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Asset denom",
              "type": "string"
            },
            "enabled": {
              "description": "Wether the user is using asset as collateral or not",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_collaterals_v2": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PaginationResponse_for_UserCollateralResponse",
      "type": "object",
      "required": [
        "data",
        "metadata"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserCollateralResponse"
          }
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Metadata": {
          "type": "object",
          "required": [
            "has_more"
          ],
          "properties": {
            "has_more": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserCollateralResponse": {
          "type": "object",
          "required": [
            "amount",
            "amount_scaled",
            "denom",
            "enabled"
          ],
          "properties": {
            "amount": {
              "description": "Underlying asset amount that is actually deposited at the current block",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "amount_scaled": {
              "description": "Scaled collateral amount stored in contract state",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Asset denom",
              "type": "string"
            },
            "enabled": {
              "description": "Wether the user is using asset as collateral or not",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_debt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserDebtResponse",
      "type": "object",
      "required": [
        "amount",
        "amount_scaled",
        "denom",
        "uncollateralized"
      ],
      "properties": {
        "amount": {
          "description": "Underlying asset amount that is actually owed at the current block",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "amount_scaled": {
          "description": "Scaled debt amount stored in contract state",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "description": "Asset denom",
          "type": "string"
        },
        "uncollateralized": {
          "description": "Marker for uncollateralized debt",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_debts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UserDebtResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserDebtResponse"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDebtResponse": {
          "type": "object",
          "required": [
            "amount",
            "amount_scaled",
            "denom",
            "uncollateralized"
          ],
          "properties": {
            "amount": {
              "description": "Underlying asset amount that is actually owed at the current block",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "amount_scaled": {
              "description": "Scaled debt amount stored in contract state",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "Asset denom",
              "type": "string"
            },
            "uncollateralized": {
              "description": "Marker for uncollateralized debt",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_position": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserPositionResponse",
      "type": "object",
      "required": [
        "health_status",
        "total_collateralized_debt",
        "total_enabled_collateral",
        "weighted_liquidation_threshold_collateral",
        "weighted_max_ltv_collateral"
      ],
      "properties": {
        "health_status": {
          "$ref": "#/definitions/UserHealthStatus"
        },
        "total_collateralized_debt": {
          "description": "Total value of all collateralized debts. If the user has an uncollateralized loan limit in an asset, the debt in this asset will not be included in this value.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_enabled_collateral": {
          "description": "Total value of all enabled collateral assets. If an asset is disabled as collateral, it will not be included in this value.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "weighted_liquidation_threshold_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "weighted_max_ltv_collateral": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserHealthStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "not_borrowing"
              ]
            },
            {
              "type": "object",
              "required": [
                "borrowing"
              ],
              "properties": {
                "borrowing": {
                  "type": "object",
                  "required": [
                    "liq_threshold_hf",
                    "max_ltv_hf"
                  ],
                  "properties": {
                    "liq_threshold_hf": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "max_ltv_hf": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "user_position_liquidation_pricing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserPositionResponse",
      "type": "object",
      "required": [
        "health_status",
        "total_collateralized_debt",
        "total_enabled_collateral",
        "weighted_liquidation_threshold_collateral",
        "weighted_max_ltv_collateral"
      ],
      "properties": {
        "health_status": {
          "$ref": "#/definitions/UserHealthStatus"
        },
        "total_collateralized_debt": {
          "description": "Total value of all collateralized debts. If the user has an uncollateralized loan limit in an asset, the debt in this asset will not be included in this value.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_enabled_collateral": {
          "description": "Total value of all enabled collateral assets. If an asset is disabled as collateral, it will not be included in this value.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "weighted_liquidation_threshold_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "weighted_max_ltv_collateral": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserHealthStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "not_borrowing"
              ]
            },
            {
              "type": "object",
              "required": [
                "borrowing"
              ],
              "properties": {
                "borrowing": {
                  "type": "object",
                  "required": [
                    "liq_threshold_hf",
                    "max_ltv_hf"
                  ],
                  "properties": {
                    "liq_threshold_hf": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "max_ltv_hf": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}
