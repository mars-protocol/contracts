{
  "contract_name": "mars-rover-health",
  "contract_version": "2.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "owner"
    ],
    "properties": {
      "credit_manager": {
        "description": "Credit Manager contract address",
        "type": [
          "string",
          "null"
        ]
      },
      "owner": {
        "description": "The address with privileged access to update config",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Manages owner role state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract config constants",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "credit_manager"
            ],
            "properties": {
              "credit_manager": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns all values that comprise health for account",
        "type": "object",
        "required": [
          "health_values"
        ],
        "properties": {
          "health_values": {
            "type": "object",
            "required": [
              "account_id",
              "action",
              "kind"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "action": {
                "$ref": "#/definitions/ActionKind"
              },
              "kind": {
                "$ref": "#/definitions/AccountKind"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns Healthy or Unhealthy state. Does not do health calculations if no debt. This is helpful in the cases like liquidation where we should not query the oracle if can help it.",
        "type": "object",
        "required": [
          "health_state"
        ],
        "properties": {
          "health_state": {
            "type": "object",
            "required": [
              "account_id",
              "action",
              "kind"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "action": {
                "$ref": "#/definitions/ActionKind"
              },
              "kind": {
                "$ref": "#/definitions/AccountKind"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountKind": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "default",
              "high_levered_strategy"
            ]
          },
          {
            "description": "A vault that is managed by a fund manager. Fund manager (wallet) is responsible for managing the vault. Fund manager can't deposit and withdraw funds from the vault.",
            "type": "object",
            "required": [
              "fund_manager"
            ],
            "properties": {
              "fund_manager": {
                "type": "object",
                "required": [
                  "vault_addr"
                ],
                "properties": {
                  "vault_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionKind": {
        "description": "Differentiator for the action (liquidate, withdraw, borrow etc.) being performed.",
        "type": "string",
        "enum": [
          "default",
          "liquidation"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "owner_response"
      ],
      "properties": {
        "credit_manager": {
          "type": [
            "string",
            "null"
          ]
        },
        "owner_response": {
          "$ref": "#/definitions/OwnerResponse"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "OwnerResponse": {
          "description": "Returned from Owner.query()",
          "type": "object",
          "required": [
            "abolished",
            "initialized"
          ],
          "properties": {
            "abolished": {
              "type": "boolean"
            },
            "emergency_owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "initialized": {
              "type": "boolean"
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "proposed": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "health_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HealthState",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "healthy"
          ]
        },
        {
          "type": "object",
          "required": [
            "unhealthy"
          ],
          "properties": {
            "unhealthy": {
              "type": "object",
              "required": [
                "max_ltv_health_factor"
              ],
              "properties": {
                "max_ltv_health_factor": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "health_values": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HealthValuesResponse",
      "type": "object",
      "required": [
        "above_max_ltv",
        "liquidatable",
        "liquidation_threshold_adjusted_collateral",
        "max_ltv_adjusted_collateral",
        "total_collateral_value",
        "total_debt_value"
      ],
      "properties": {
        "above_max_ltv": {
          "type": "boolean"
        },
        "liquidatable": {
          "type": "boolean"
        },
        "liquidation_health_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_threshold_adjusted_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "max_ltv_adjusted_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "max_ltv_health_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "total_collateral_value": {
          "$ref": "#/definitions/Uint128"
        },
        "total_debt_value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
