// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  Uint128,
  Decimal,
  InstantiateMsg,
  NeutronIbcConfig,
  Coin,
  ExecuteMsg,
  OwnerUpdate,
  Action,
  ActionAmount,
  LiquidateRequestForVaultBaseForString,
  VaultPositionType,
  SwapperRoute,
  UpdateConfig,
  ActionCoin,
  VaultBaseForString,
  AstroRoute,
  AstroSwap,
  OsmoRoute,
  OsmoSwap,
  QueryMsg,
  ConfigResponse,
} from './MarsRewardsCollectorBase.types'
export interface MarsRewardsCollectorBaseReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
}
export class MarsRewardsCollectorBaseQueryClient
  implements MarsRewardsCollectorBaseReadOnlyInterface
{
  client: CosmWasmClient
  contractAddress: string
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
}
export interface MarsRewardsCollectorBaseInterface
  extends MarsRewardsCollectorBaseReadOnlyInterface {
  contractAddress: string
  sender: string
  updateOwner: (
    ownerUpdate: OwnerUpdate,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateConfig: (
    {
      newCfg,
    }: {
      newCfg: UpdateConfig
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  withdrawFromRedBank: (
    {
      amount,
      denom,
    }: {
      amount?: Uint128
      denom: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  withdrawFromCreditManager: (
    {
      accountId,
      actions,
    }: {
      accountId: string
      actions: Action[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  distributeRewards: (
    {
      amount,
      denom,
    }: {
      amount?: Uint128
      denom: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  swapAsset: (
    {
      amount,
      denom,
      feeCollectorMinReceive,
      feeCollectorRoute,
      safetyFundMinReceive,
      safetyFundRoute,
    }: {
      amount?: Uint128
      denom: string
      feeCollectorMinReceive?: Uint128
      feeCollectorRoute?: SwapperRoute
      safetyFundMinReceive?: Uint128
      safetyFundRoute?: SwapperRoute
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  claimIncentiveRewards: (
    {
      limit,
      startAfterCollateralDenom,
      startAfterIncentiveDenom,
    }: {
      limit?: number
      startAfterCollateralDenom?: string
      startAfterIncentiveDenom?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MarsRewardsCollectorBaseClient
  extends MarsRewardsCollectorBaseQueryClient
  implements MarsRewardsCollectorBaseInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateOwner = this.updateOwner.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
    this.withdrawFromRedBank = this.withdrawFromRedBank.bind(this)
    this.withdrawFromCreditManager = this.withdrawFromCreditManager.bind(this)
    this.distributeRewards = this.distributeRewards.bind(this)
    this.swapAsset = this.swapAsset.bind(this)
    this.claimIncentiveRewards = this.claimIncentiveRewards.bind(this)
  }
  updateOwner = async (
    ownerUpdate: OwnerUpdate,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_owner: ownerUpdate,
      },
      fee,
      memo,
      _funds,
    )
  }
  updateConfig = async (
    {
      newCfg,
    }: {
      newCfg: UpdateConfig
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          new_cfg: newCfg,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  withdrawFromRedBank = async (
    {
      amount,
      denom,
    }: {
      amount?: Uint128
      denom: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_from_red_bank: {
          amount,
          denom,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  withdrawFromCreditManager = async (
    {
      accountId,
      actions,
    }: {
      accountId: string
      actions: Action[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_from_credit_manager: {
          account_id: accountId,
          actions,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  distributeRewards = async (
    {
      amount,
      denom,
    }: {
      amount?: Uint128
      denom: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        distribute_rewards: {
          amount,
          denom,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  swapAsset = async (
    {
      amount,
      denom,
      feeCollectorMinReceive,
      feeCollectorRoute,
      safetyFundMinReceive,
      safetyFundRoute,
    }: {
      amount?: Uint128
      denom: string
      feeCollectorMinReceive?: Uint128
      feeCollectorRoute?: SwapperRoute
      safetyFundMinReceive?: Uint128
      safetyFundRoute?: SwapperRoute
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        swap_asset: {
          amount,
          denom,
          fee_collector_min_receive: feeCollectorMinReceive,
          fee_collector_route: feeCollectorRoute,
          safety_fund_min_receive: safetyFundMinReceive,
          safety_fund_route: safetyFundRoute,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  claimIncentiveRewards = async (
    {
      limit,
      startAfterCollateralDenom,
      startAfterIncentiveDenom,
    }: {
      limit?: number
      startAfterCollateralDenom?: string
      startAfterIncentiveDenom?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        claim_incentive_rewards: {
          limit,
          start_after_collateral_denom: startAfterCollateralDenom,
          start_after_incentive_denom: startAfterIncentiveDenom,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
}
