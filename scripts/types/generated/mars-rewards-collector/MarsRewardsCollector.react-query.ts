// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  Uint128,
  UpdateConfig,
  QueryMsg,
  ConfigResponse,
} from './MarsRewardsCollector.types'
import {
  MarsRewardsCollectorQueryClient,
  MarsRewardsCollectorClient,
} from './MarsRewardsCollector.client'
export const marsRewardsCollectorQueryKeys = {
  contract: [
    {
      contract: 'marsRewardsCollector',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...marsRewardsCollectorQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsRewardsCollectorQueryKeys.address(contractAddress)[0], method: 'config', args },
    ] as const,
}
export interface MarsRewardsCollectorReactQuery<TResponse, TData = TResponse> {
  client: MarsRewardsCollectorQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsRewardsCollectorConfigQuery<TData>
  extends MarsRewardsCollectorReactQuery<ConfigResponse, TData> {}
export function useMarsRewardsCollectorConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: MarsRewardsCollectorConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    marsRewardsCollectorQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsRewardsCollectorClaimIncentiveRewardsMutation {
  client: MarsRewardsCollectorClient
  msg: {
    limit?: number
    startAfterCollateralDenom?: string
    startAfterIncentiveDenom?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorClaimIncentiveRewardsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorClaimIncentiveRewardsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorClaimIncentiveRewardsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.claimIncentiveRewards(msg, fee, memo, funds),
    options,
  )
}
export interface MarsRewardsCollectorSwapAssetMutation {
  client: MarsRewardsCollectorClient
  msg: {
    amount?: Uint128
    denom: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorSwapAssetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorSwapAssetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorSwapAssetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.swapAsset(msg, fee, memo, funds),
    options,
  )
}
export interface MarsRewardsCollectorDistributeRewardsMutation {
  client: MarsRewardsCollectorClient
  msg: {
    amount?: Uint128
    denom: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorDistributeRewardsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorDistributeRewardsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorDistributeRewardsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.distributeRewards(msg, fee, memo, funds),
    options,
  )
}
export interface MarsRewardsCollectorWithdrawFromRedBankMutation {
  client: MarsRewardsCollectorClient
  msg: {
    amount?: Uint128
    denom: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorWithdrawFromRedBankMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorWithdrawFromRedBankMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorWithdrawFromRedBankMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.withdrawFromRedBank(msg, fee, memo, funds),
    options,
  )
}
export interface MarsRewardsCollectorUpdateConfigMutation {
  client: MarsRewardsCollectorClient
  msg: {
    newCfg: UpdateConfig
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface MarsRewardsCollectorUpdateOwnerMutation {
  client: MarsRewardsCollectorClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsRewardsCollectorUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsRewardsCollectorUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsRewardsCollectorUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
