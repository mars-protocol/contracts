// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  PerformanceFeeConfig,
  ExecuteMsg,
  Uint128,
  ExtensionExecuteMsg,
  QueryMsg,
  ExtensionQueryMsg,
  VaultInfoResponse,
  Empty,
  VaultStandardInfoResponse,
} from './MarsVault.types'
import { MarsVaultQueryClient, MarsVaultClient } from './MarsVault.client'
export const marsVaultQueryKeys = {
  contract: [
    {
      contract: 'marsVault',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      {
        ...marsVaultQueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  vaultStandardInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'vault_standard_info',
        args,
      },
    ] as const,
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
  previewDeposit: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'preview_deposit',
        args,
      },
    ] as const,
  previewRedeem: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'preview_redeem',
        args,
      },
    ] as const,
  totalAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'total_assets',
        args,
      },
    ] as const,
  totalVaultTokenSupply: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'total_vault_token_supply',
        args,
      },
    ] as const,
  convertToShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'convert_to_shares',
        args,
      },
    ] as const,
  convertToAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'convert_to_assets',
        args,
      },
    ] as const,
  vaultExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsVaultQueryKeys.address(contractAddress)[0],
        method: 'vault_extension',
        args,
      },
    ] as const,
}
export interface MarsVaultReactQuery<TResponse, TData = TResponse> {
  client: MarsVaultQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsVaultVaultExtensionQuery<TData> extends MarsVaultReactQuery<Empty, TData> {}
export function useMarsVaultVaultExtensionQuery<TData = Empty>({
  client,
  options,
}: MarsVaultVaultExtensionQuery<TData>) {
  return useQuery<Empty, Error, TData>(
    marsVaultQueryKeys.vaultExtension(client?.contractAddress),
    () => (client ? client.vaultExtension() : Promise.reject(new Error('Invalid client'))),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultConvertToAssetsQuery<TData> extends MarsVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMarsVaultConvertToAssetsQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsVaultConvertToAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.convertToAssets(client?.contractAddress, args),
    () =>
      client
        ? client.convertToAssets({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultConvertToSharesQuery<TData> extends MarsVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMarsVaultConvertToSharesQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsVaultConvertToSharesQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.convertToShares(client?.contractAddress, args),
    () =>
      client
        ? client.convertToShares({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultTotalVaultTokenSupplyQuery<TData>
  extends MarsVaultReactQuery<Uint128, TData> {}
export function useMarsVaultTotalVaultTokenSupplyQuery<TData = Uint128>({
  client,
  options,
}: MarsVaultTotalVaultTokenSupplyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.totalVaultTokenSupply(client?.contractAddress),
    () => (client ? client.totalVaultTokenSupply() : Promise.reject(new Error('Invalid client'))),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultTotalAssetsQuery<TData> extends MarsVaultReactQuery<Uint128, TData> {}
export function useMarsVaultTotalAssetsQuery<TData = Uint128>({
  client,
  options,
}: MarsVaultTotalAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.totalAssets(client?.contractAddress),
    () => (client ? client.totalAssets() : Promise.reject(new Error('Invalid client'))),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultPreviewRedeemQuery<TData> extends MarsVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMarsVaultPreviewRedeemQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsVaultPreviewRedeemQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.previewRedeem(client?.contractAddress, args),
    () =>
      client
        ? client.previewRedeem({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultPreviewDepositQuery<TData> extends MarsVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMarsVaultPreviewDepositQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsVaultPreviewDepositQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsVaultQueryKeys.previewDeposit(client?.contractAddress, args),
    () =>
      client
        ? client.previewDeposit({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultInfoQuery<TData> extends MarsVaultReactQuery<VaultInfoResponse, TData> {}
export function useMarsVaultInfoQuery<TData = VaultInfoResponse>({
  client,
  options,
}: MarsVaultInfoQuery<TData>) {
  return useQuery<VaultInfoResponse, Error, TData>(
    marsVaultQueryKeys.info(client?.contractAddress),
    () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultVaultStandardInfoQuery<TData>
  extends MarsVaultReactQuery<VaultStandardInfoResponse, TData> {}
export function useMarsVaultVaultStandardInfoQuery<TData = VaultStandardInfoResponse>({
  client,
  options,
}: MarsVaultVaultStandardInfoQuery<TData>) {
  return useQuery<VaultStandardInfoResponse, Error, TData>(
    marsVaultQueryKeys.vaultStandardInfo(client?.contractAddress),
    () => (client ? client.vaultStandardInfo() : Promise.reject(new Error('Invalid client'))),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsVaultVaultExtensionMutation {
  client: MarsVaultClient
  msg: ExtensionExecuteMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsVaultVaultExtensionMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsVaultVaultExtensionMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsVaultVaultExtensionMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.vaultExtension(msg, fee, memo, funds),
    options,
  )
}
export interface MarsVaultRedeemMutation {
  client: MarsVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsVaultRedeemMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVaultRedeemMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MarsVaultRedeemMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.redeem(msg, fee, memo, funds),
    options,
  )
}
export interface MarsVaultDepositMutation {
  client: MarsVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsVaultDepositMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsVaultDepositMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MarsVaultDepositMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.deposit(msg, fee, memo, funds),
    options,
  )
}
