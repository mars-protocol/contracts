// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  Addr,
  OwnerUpdate,
  QueryMsg,
  Decimal,
  AssetIncentiveResponse,
  ArrayOfAssetIncentiveResponse,
  ConfigResponse,
} from './MarsIncentives.types'
import { MarsIncentivesQueryClient, MarsIncentivesClient } from './MarsIncentives.client'
export const marsIncentivesQueryKeys = {
  contract: [
    {
      contract: 'marsIncentives',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...marsIncentivesQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...marsIncentivesQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  assetIncentive: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsIncentivesQueryKeys.address(contractAddress)[0], method: 'asset_incentive', args },
    ] as const,
  assetIncentives: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsIncentivesQueryKeys.address(contractAddress)[0], method: 'asset_incentives', args },
    ] as const,
  userUnclaimedRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsIncentivesQueryKeys.address(contractAddress)[0],
        method: 'user_unclaimed_rewards',
        args,
      },
    ] as const,
}
export interface MarsIncentivesReactQuery<TResponse, TData = TResponse> {
  client: MarsIncentivesQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsIncentivesUserUnclaimedRewardsQuery<TData>
  extends MarsIncentivesReactQuery<Uint128, TData> {
  args: {
    user: string
  }
}
export function useMarsIncentivesUserUnclaimedRewardsQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsIncentivesUserUnclaimedRewardsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsIncentivesQueryKeys.userUnclaimedRewards(client?.contractAddress, args),
    () =>
      client
        ? client.userUnclaimedRewards({
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsIncentivesAssetIncentivesQuery<TData>
  extends MarsIncentivesReactQuery<ArrayOfAssetIncentiveResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useMarsIncentivesAssetIncentivesQuery<TData = ArrayOfAssetIncentiveResponse>({
  client,
  args,
  options,
}: MarsIncentivesAssetIncentivesQuery<TData>) {
  return useQuery<ArrayOfAssetIncentiveResponse, Error, TData>(
    marsIncentivesQueryKeys.assetIncentives(client?.contractAddress, args),
    () =>
      client
        ? client.assetIncentives({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsIncentivesAssetIncentiveQuery<TData>
  extends MarsIncentivesReactQuery<AssetIncentiveResponse, TData> {
  args: {
    denom: string
  }
}
export function useMarsIncentivesAssetIncentiveQuery<TData = AssetIncentiveResponse>({
  client,
  args,
  options,
}: MarsIncentivesAssetIncentiveQuery<TData>) {
  return useQuery<AssetIncentiveResponse, Error, TData>(
    marsIncentivesQueryKeys.assetIncentive(client?.contractAddress, args),
    () =>
      client
        ? client.assetIncentive({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsIncentivesConfigQuery<TData>
  extends MarsIncentivesReactQuery<ConfigResponse, TData> {}
export function useMarsIncentivesConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: MarsIncentivesConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    marsIncentivesQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsIncentivesUpdateOwnerMutation {
  client: MarsIncentivesClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsIncentivesUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsIncentivesUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsIncentivesUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
export interface MarsIncentivesUpdateConfigMutation {
  client: MarsIncentivesClient
  msg: {
    addressProvider?: string
    marsDenom?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsIncentivesUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsIncentivesUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsIncentivesUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface MarsIncentivesClaimRewardsMutation {
  client: MarsIncentivesClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsIncentivesClaimRewardsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsIncentivesClaimRewardsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsIncentivesClaimRewardsMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.claimRewards(fee, memo, funds),
    options,
  )
}
export interface MarsIncentivesBalanceChangeMutation {
  client: MarsIncentivesClient
  msg: {
    denom: string
    totalAmountScaledBefore: Uint128
    userAddr: Addr
    userAmountScaledBefore: Uint128
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsIncentivesBalanceChangeMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsIncentivesBalanceChangeMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsIncentivesBalanceChangeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.balanceChange(msg, fee, memo, funds),
    options,
  )
}
export interface MarsIncentivesSetAssetIncentiveMutation {
  client: MarsIncentivesClient
  msg: {
    denom: string
    duration?: number
    emissionPerSecond?: Uint128
    startTime?: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsIncentivesSetAssetIncentiveMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsIncentivesSetAssetIncentiveMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsIncentivesSetAssetIncentiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setAssetIncentive(msg, fee, memo, funds),
    options,
  )
}
