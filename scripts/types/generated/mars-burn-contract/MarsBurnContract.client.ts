// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  QueryMsg,
  Uint128,
  BurntAmountsResponse,
  BurntAmountResponse,
} from './MarsBurnContract.types'
export interface MarsBurnContractReadOnlyInterface {
  contractAddress: string
  getBurntAmount: ({ denom }: { denom: string }) => Promise<BurntAmountResponse>
  getAllBurntAmounts: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }) => Promise<BurntAmountsResponse>
}
export class MarsBurnContractQueryClient implements MarsBurnContractReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.getBurntAmount = this.getBurntAmount.bind(this)
    this.getAllBurntAmounts = this.getAllBurntAmounts.bind(this)
  }
  getBurntAmount = async ({ denom }: { denom: string }): Promise<BurntAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_burnt_amount: {
        denom,
      },
    })
  }
  getAllBurntAmounts = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }): Promise<BurntAmountsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_burnt_amounts: {
        limit,
        start_after: startAfter,
      },
    })
  }
}
export interface MarsBurnContractInterface extends MarsBurnContractReadOnlyInterface {
  contractAddress: string
  sender: string
  burnFunds: (
    {
      denom,
    }: {
      denom: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MarsBurnContractClient
  extends MarsBurnContractQueryClient
  implements MarsBurnContractInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.burnFunds = this.burnFunds.bind(this)
  }
  burnFunds = async (
    {
      denom,
    }: {
      denom: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        burn_funds: {
          denom,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
}
