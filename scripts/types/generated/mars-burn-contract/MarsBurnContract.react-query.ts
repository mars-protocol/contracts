// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  QueryMsg,
  Uint128,
  BurntAmountsResponse,
  BurntAmountResponse,
} from './MarsBurnContract.types'
import { MarsBurnContractQueryClient, MarsBurnContractClient } from './MarsBurnContract.client'
export const marsBurnContractQueryKeys = {
  contract: [
    {
      contract: 'marsBurnContract',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      {
        ...marsBurnContractQueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  getBurntAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsBurnContractQueryKeys.address(contractAddress)[0],
        method: 'get_burnt_amount',
        args,
      },
    ] as const,
  getAllBurntAmounts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsBurnContractQueryKeys.address(contractAddress)[0],
        method: 'get_all_burnt_amounts',
        args,
      },
    ] as const,
}
export interface MarsBurnContractReactQuery<TResponse, TData = TResponse> {
  client: MarsBurnContractQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsBurnContractGetAllBurntAmountsQuery<TData>
  extends MarsBurnContractReactQuery<BurntAmountsResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useMarsBurnContractGetAllBurntAmountsQuery<TData = BurntAmountsResponse>({
  client,
  args,
  options,
}: MarsBurnContractGetAllBurntAmountsQuery<TData>) {
  return useQuery<BurntAmountsResponse, Error, TData>(
    marsBurnContractQueryKeys.getAllBurntAmounts(client?.contractAddress, args),
    () =>
      client
        ? client.getAllBurntAmounts({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsBurnContractGetBurntAmountQuery<TData>
  extends MarsBurnContractReactQuery<BurntAmountResponse, TData> {
  args: {
    denom: string
  }
}
export function useMarsBurnContractGetBurntAmountQuery<TData = BurntAmountResponse>({
  client,
  args,
  options,
}: MarsBurnContractGetBurntAmountQuery<TData>) {
  return useQuery<BurntAmountResponse, Error, TData>(
    marsBurnContractQueryKeys.getBurntAmount(client?.contractAddress, args),
    () =>
      client
        ? client.getBurntAmount({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  )
}
export interface MarsBurnContractBurnFundsMutation {
  client: MarsBurnContractClient
  msg: {
    denom: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsBurnContractBurnFundsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsBurnContractBurnFundsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsBurnContractBurnFundsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.burnFunds(msg, fee, memo, funds),
    options,
  )
}
